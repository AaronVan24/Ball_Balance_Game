
AVanLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001218  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006788  08006788  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006790  08006790  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006794  08006794  00016794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00025b38  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025ba8  20025ba8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b31b  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002669  00000000  00000000  0002b3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bc8  00000000  00000000  0002da68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008a0  00000000  00000000  0002e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002524b  00000000  00000000  0002eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e6c0  00000000  00000000  0005411b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d59d7  00000000  00000000  000627db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003270  00000000  00000000  001381b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0013b424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005558 	.word	0x08005558

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005558 	.word	0x08005558

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800090c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000910:	f000 b970 	b.w	8000bf4 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9e08      	ldr	r6, [sp, #32]
 8000932:	460d      	mov	r5, r1
 8000934:	4604      	mov	r4, r0
 8000936:	460f      	mov	r7, r1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d14a      	bne.n	80009d2 <__udivmoddi4+0xa6>
 800093c:	428a      	cmp	r2, r1
 800093e:	4694      	mov	ip, r2
 8000940:	d965      	bls.n	8000a0e <__udivmoddi4+0xe2>
 8000942:	fab2 f382 	clz	r3, r2
 8000946:	b143      	cbz	r3, 800095a <__udivmoddi4+0x2e>
 8000948:	fa02 fc03 	lsl.w	ip, r2, r3
 800094c:	f1c3 0220 	rsb	r2, r3, #32
 8000950:	409f      	lsls	r7, r3
 8000952:	fa20 f202 	lsr.w	r2, r0, r2
 8000956:	4317      	orrs	r7, r2
 8000958:	409c      	lsls	r4, r3
 800095a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800095e:	fa1f f58c 	uxth.w	r5, ip
 8000962:	fbb7 f1fe 	udiv	r1, r7, lr
 8000966:	0c22      	lsrs	r2, r4, #16
 8000968:	fb0e 7711 	mls	r7, lr, r1, r7
 800096c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000970:	fb01 f005 	mul.w	r0, r1, r5
 8000974:	4290      	cmp	r0, r2
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x62>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000980:	f080 811c 	bcs.w	8000bbc <__udivmoddi4+0x290>
 8000984:	4290      	cmp	r0, r2
 8000986:	f240 8119 	bls.w	8000bbc <__udivmoddi4+0x290>
 800098a:	3902      	subs	r1, #2
 800098c:	4462      	add	r2, ip
 800098e:	1a12      	subs	r2, r2, r0
 8000990:	b2a4      	uxth	r4, r4
 8000992:	fbb2 f0fe 	udiv	r0, r2, lr
 8000996:	fb0e 2210 	mls	r2, lr, r0, r2
 800099a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800099e:	fb00 f505 	mul.w	r5, r0, r5
 80009a2:	42a5      	cmp	r5, r4
 80009a4:	d90a      	bls.n	80009bc <__udivmoddi4+0x90>
 80009a6:	eb1c 0404 	adds.w	r4, ip, r4
 80009aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80009ae:	f080 8107 	bcs.w	8000bc0 <__udivmoddi4+0x294>
 80009b2:	42a5      	cmp	r5, r4
 80009b4:	f240 8104 	bls.w	8000bc0 <__udivmoddi4+0x294>
 80009b8:	4464      	add	r4, ip
 80009ba:	3802      	subs	r0, #2
 80009bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009c0:	1b64      	subs	r4, r4, r5
 80009c2:	2100      	movs	r1, #0
 80009c4:	b11e      	cbz	r6, 80009ce <__udivmoddi4+0xa2>
 80009c6:	40dc      	lsrs	r4, r3
 80009c8:	2300      	movs	r3, #0
 80009ca:	e9c6 4300 	strd	r4, r3, [r6]
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0xbc>
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	f000 80ed 	beq.w	8000bb6 <__udivmoddi4+0x28a>
 80009dc:	2100      	movs	r1, #0
 80009de:	e9c6 0500 	strd	r0, r5, [r6]
 80009e2:	4608      	mov	r0, r1
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	fab3 f183 	clz	r1, r3
 80009ec:	2900      	cmp	r1, #0
 80009ee:	d149      	bne.n	8000a84 <__udivmoddi4+0x158>
 80009f0:	42ab      	cmp	r3, r5
 80009f2:	d302      	bcc.n	80009fa <__udivmoddi4+0xce>
 80009f4:	4282      	cmp	r2, r0
 80009f6:	f200 80f8 	bhi.w	8000bea <__udivmoddi4+0x2be>
 80009fa:	1a84      	subs	r4, r0, r2
 80009fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000a00:	2001      	movs	r0, #1
 8000a02:	4617      	mov	r7, r2
 8000a04:	2e00      	cmp	r6, #0
 8000a06:	d0e2      	beq.n	80009ce <__udivmoddi4+0xa2>
 8000a08:	e9c6 4700 	strd	r4, r7, [r6]
 8000a0c:	e7df      	b.n	80009ce <__udivmoddi4+0xa2>
 8000a0e:	b902      	cbnz	r2, 8000a12 <__udivmoddi4+0xe6>
 8000a10:	deff      	udf	#255	; 0xff
 8000a12:	fab2 f382 	clz	r3, r2
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f040 8090 	bne.w	8000b3c <__udivmoddi4+0x210>
 8000a1c:	1a8a      	subs	r2, r1, r2
 8000a1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a22:	fa1f fe8c 	uxth.w	lr, ip
 8000a26:	2101      	movs	r1, #1
 8000a28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a30:	0c22      	lsrs	r2, r4, #16
 8000a32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a36:	fb0e f005 	mul.w	r0, lr, r5
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x124>
 8000a3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0x122>
 8000a48:	4290      	cmp	r0, r2
 8000a4a:	f200 80cb 	bhi.w	8000be4 <__udivmoddi4+0x2b8>
 8000a4e:	4645      	mov	r5, r8
 8000a50:	1a12      	subs	r2, r2, r0
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a58:	fb07 2210 	mls	r2, r7, r0, r2
 8000a5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a60:	fb0e fe00 	mul.w	lr, lr, r0
 8000a64:	45a6      	cmp	lr, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x14e>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a70:	d202      	bcs.n	8000a78 <__udivmoddi4+0x14c>
 8000a72:	45a6      	cmp	lr, r4
 8000a74:	f200 80bb 	bhi.w	8000bee <__udivmoddi4+0x2c2>
 8000a78:	4610      	mov	r0, r2
 8000a7a:	eba4 040e 	sub.w	r4, r4, lr
 8000a7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a82:	e79f      	b.n	80009c4 <__udivmoddi4+0x98>
 8000a84:	f1c1 0720 	rsb	r7, r1, #32
 8000a88:	408b      	lsls	r3, r1
 8000a8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a92:	fa05 f401 	lsl.w	r4, r5, r1
 8000a96:	fa20 f307 	lsr.w	r3, r0, r7
 8000a9a:	40fd      	lsrs	r5, r7
 8000a9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aa0:	4323      	orrs	r3, r4
 8000aa2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000aa6:	fa1f fe8c 	uxth.w	lr, ip
 8000aaa:	fb09 5518 	mls	r5, r9, r8, r5
 8000aae:	0c1c      	lsrs	r4, r3, #16
 8000ab0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ab4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ab8:	42a5      	cmp	r5, r4
 8000aba:	fa02 f201 	lsl.w	r2, r2, r1
 8000abe:	fa00 f001 	lsl.w	r0, r0, r1
 8000ac2:	d90b      	bls.n	8000adc <__udivmoddi4+0x1b0>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000acc:	f080 8088 	bcs.w	8000be0 <__udivmoddi4+0x2b4>
 8000ad0:	42a5      	cmp	r5, r4
 8000ad2:	f240 8085 	bls.w	8000be0 <__udivmoddi4+0x2b4>
 8000ad6:	f1a8 0802 	sub.w	r8, r8, #2
 8000ada:	4464      	add	r4, ip
 8000adc:	1b64      	subs	r4, r4, r5
 8000ade:	b29d      	uxth	r5, r3
 8000ae0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ae4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ae8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000aec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000af0:	45a6      	cmp	lr, r4
 8000af2:	d908      	bls.n	8000b06 <__udivmoddi4+0x1da>
 8000af4:	eb1c 0404 	adds.w	r4, ip, r4
 8000af8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000afc:	d26c      	bcs.n	8000bd8 <__udivmoddi4+0x2ac>
 8000afe:	45a6      	cmp	lr, r4
 8000b00:	d96a      	bls.n	8000bd8 <__udivmoddi4+0x2ac>
 8000b02:	3b02      	subs	r3, #2
 8000b04:	4464      	add	r4, ip
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b0e:	eba4 040e 	sub.w	r4, r4, lr
 8000b12:	42ac      	cmp	r4, r5
 8000b14:	46c8      	mov	r8, r9
 8000b16:	46ae      	mov	lr, r5
 8000b18:	d356      	bcc.n	8000bc8 <__udivmoddi4+0x29c>
 8000b1a:	d053      	beq.n	8000bc4 <__udivmoddi4+0x298>
 8000b1c:	b156      	cbz	r6, 8000b34 <__udivmoddi4+0x208>
 8000b1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b22:	eb64 040e 	sbc.w	r4, r4, lr
 8000b26:	fa04 f707 	lsl.w	r7, r4, r7
 8000b2a:	40ca      	lsrs	r2, r1
 8000b2c:	40cc      	lsrs	r4, r1
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	e9c6 7400 	strd	r7, r4, [r6]
 8000b34:	4618      	mov	r0, r3
 8000b36:	2100      	movs	r1, #0
 8000b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3c:	f1c3 0120 	rsb	r1, r3, #32
 8000b40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b44:	fa20 f201 	lsr.w	r2, r0, r1
 8000b48:	fa25 f101 	lsr.w	r1, r5, r1
 8000b4c:	409d      	lsls	r5, r3
 8000b4e:	432a      	orrs	r2, r5
 8000b50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b54:	fa1f fe8c 	uxth.w	lr, ip
 8000b58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b60:	0c11      	lsrs	r1, r2, #16
 8000b62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b66:	fb00 f50e 	mul.w	r5, r0, lr
 8000b6a:	428d      	cmp	r5, r1
 8000b6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x258>
 8000b72:	eb1c 0101 	adds.w	r1, ip, r1
 8000b76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b7a:	d22f      	bcs.n	8000bdc <__udivmoddi4+0x2b0>
 8000b7c:	428d      	cmp	r5, r1
 8000b7e:	d92d      	bls.n	8000bdc <__udivmoddi4+0x2b0>
 8000b80:	3802      	subs	r0, #2
 8000b82:	4461      	add	r1, ip
 8000b84:	1b49      	subs	r1, r1, r5
 8000b86:	b292      	uxth	r2, r2
 8000b88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b94:	fb05 f10e 	mul.w	r1, r5, lr
 8000b98:	4291      	cmp	r1, r2
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x282>
 8000b9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ba4:	d216      	bcs.n	8000bd4 <__udivmoddi4+0x2a8>
 8000ba6:	4291      	cmp	r1, r2
 8000ba8:	d914      	bls.n	8000bd4 <__udivmoddi4+0x2a8>
 8000baa:	3d02      	subs	r5, #2
 8000bac:	4462      	add	r2, ip
 8000bae:	1a52      	subs	r2, r2, r1
 8000bb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bb4:	e738      	b.n	8000a28 <__udivmoddi4+0xfc>
 8000bb6:	4631      	mov	r1, r6
 8000bb8:	4630      	mov	r0, r6
 8000bba:	e708      	b.n	80009ce <__udivmoddi4+0xa2>
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e6e6      	b.n	800098e <__udivmoddi4+0x62>
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	e6fb      	b.n	80009bc <__udivmoddi4+0x90>
 8000bc4:	4548      	cmp	r0, r9
 8000bc6:	d2a9      	bcs.n	8000b1c <__udivmoddi4+0x1f0>
 8000bc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	e7a3      	b.n	8000b1c <__udivmoddi4+0x1f0>
 8000bd4:	4645      	mov	r5, r8
 8000bd6:	e7ea      	b.n	8000bae <__udivmoddi4+0x282>
 8000bd8:	462b      	mov	r3, r5
 8000bda:	e794      	b.n	8000b06 <__udivmoddi4+0x1da>
 8000bdc:	4640      	mov	r0, r8
 8000bde:	e7d1      	b.n	8000b84 <__udivmoddi4+0x258>
 8000be0:	46d0      	mov	r8, sl
 8000be2:	e77b      	b.n	8000adc <__udivmoddi4+0x1b0>
 8000be4:	3d02      	subs	r5, #2
 8000be6:	4462      	add	r2, ip
 8000be8:	e732      	b.n	8000a50 <__udivmoddi4+0x124>
 8000bea:	4608      	mov	r0, r1
 8000bec:	e70a      	b.n	8000a04 <__udivmoddi4+0xd8>
 8000bee:	4464      	add	r4, ip
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	e742      	b.n	8000a7a <__udivmoddi4+0x14e>

08000bf4 <__aeabi_idiv0>:
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <ApplicationInit>:
		}
	}
	return;
}

void ApplicationInit(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
//	colorLED = GREEN_SELECT;
//	GreenLED_deactivate();
	//app_init_lvl_button();
//	addSchedulerEvent(LED_TOGGLE_EVENT);
//	addSchedulerEvent(DELAY_EVENT);
	app_Gyro_init();
 8000bfc:	f000 f85b 	bl	8000cb6 <app_Gyro_init>
	init_intrp_mode();
 8000c00:	f000 f888 	bl	8000d14 <init_intrp_mode>
//		addSchedulerEvent(BUTTON_POLL);
//	#else
//		init_button_intrp();
//	#endif

	LTCD__Init();
 8000c04:	f000 fb84 	bl	8001310 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f000 fbdf 	bl	80013cc <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 fd3c 	bl	8001690 <LCD_Clear>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <EXTI0_IRQHandler>:
#if USE_INTERRUPT_FOR_BUTTON == 1
void init_button_intrp(){
	init_intrp_mode();
}

void EXTI0_IRQHandler(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	IRQ_disable_intrp(EXTI0_IRQn);
 8000c20:	2006      	movs	r0, #6
 8000c22:	f000 fa79 	bl	8001118 <IRQ_disable_intrp>
	LCD_Clear(0,LCD_COLOR_GREEN);
 8000c26:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 fd30 	bl	8001690 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c30:	2000      	movs	r0, #0
 8000c32:	f000 fcb9 	bl	80015a8 <LCD_SetTextColor>

	LCD_DisplayChar(60,140,'G');
 8000c36:	2247      	movs	r2, #71	; 0x47
 8000c38:	218c      	movs	r1, #140	; 0x8c
 8000c3a:	203c      	movs	r0, #60	; 0x3c
 8000c3c:	f000 fc92 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'A');
 8000c40:	2241      	movs	r2, #65	; 0x41
 8000c42:	218c      	movs	r1, #140	; 0x8c
 8000c44:	204b      	movs	r0, #75	; 0x4b
 8000c46:	f000 fc8d 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'M');
 8000c4a:	224d      	movs	r2, #77	; 0x4d
 8000c4c:	218c      	movs	r1, #140	; 0x8c
 8000c4e:	205a      	movs	r0, #90	; 0x5a
 8000c50:	f000 fc88 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(105,140,'E');
 8000c54:	2245      	movs	r2, #69	; 0x45
 8000c56:	218c      	movs	r1, #140	; 0x8c
 8000c58:	2069      	movs	r0, #105	; 0x69
 8000c5a:	f000 fc83 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,' ');
 8000c5e:	2220      	movs	r2, #32
 8000c60:	218c      	movs	r1, #140	; 0x8c
 8000c62:	2073      	movs	r0, #115	; 0x73
 8000c64:	f000 fc7e 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'R');
 8000c68:	2252      	movs	r2, #82	; 0x52
 8000c6a:	218c      	movs	r1, #140	; 0x8c
 8000c6c:	207d      	movs	r0, #125	; 0x7d
 8000c6e:	f000 fc79 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'E');
 8000c72:	2245      	movs	r2, #69	; 0x45
 8000c74:	218c      	movs	r1, #140	; 0x8c
 8000c76:	208c      	movs	r0, #140	; 0x8c
 8000c78:	f000 fc74 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'S');
 8000c7c:	2253      	movs	r2, #83	; 0x53
 8000c7e:	218c      	movs	r1, #140	; 0x8c
 8000c80:	209b      	movs	r0, #155	; 0x9b
 8000c82:	f000 fc6f 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(170,140,'E');
 8000c86:	2245      	movs	r2, #69	; 0x45
 8000c88:	218c      	movs	r1, #140	; 0x8c
 8000c8a:	20aa      	movs	r0, #170	; 0xaa
 8000c8c:	f000 fc6a 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(185,140,'T');
 8000c90:	2254      	movs	r2, #84	; 0x54
 8000c92:	218c      	movs	r1, #140	; 0x8c
 8000c94:	20b9      	movs	r0, #185	; 0xb9
 8000c96:	f000 fc65 	bl	8001564 <LCD_DisplayChar>

//	startScreen();

	addSchedulerEvent(EVENTFLAG_REBOOT_CMD);
 8000c9a:	2020      	movs	r0, #32
 8000c9c:	f001 f93a 	bl	8001f14 <addSchedulerEvent>
//		EXTI_clear_pending_intrp(PIN_NUMBER);
//
//	}
	//IRQ_clear_pending_intrp(EXTI0_IRQn);
	//printf("REBOOT activated \n");
	IRQ_clear_pending_intrp(EXTI0_IRQn);
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	f000 fa47 	bl	8001134 <IRQ_clear_pending_intrp>
	EXTI_clear_pending_intrp(PIN_NUMBER);
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 fa52 	bl	8001150 <EXTI_clear_pending_intrp>
	IRQ_enable_intrp(EXTI0_IRQn);
 8000cac:	2006      	movs	r0, #6
 8000cae:	f000 fa25 	bl	80010fc <IRQ_enable_intrp>

//
//	startScreen();
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <app_Gyro_init>:

void app_Gyro_init(){
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
	Gyro_init();
 8000cba:	f000 f85f 	bl	8000d7c <Gyro_init>
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <app_Gyro_configure_regs>:

void app_Gyro_temperature(){
	Gyro_temperature();
}

void app_Gyro_configure_regs(){
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
	Gyro_configure_regs();
 8000cc6:	f000 f8db 	bl	8000e80 <Gyro_configure_regs>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <app_Gyro_getx>:

float app_Gyro_getx(){
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
	return Gyro_getx();
 8000cd2:	f000 f955 	bl	8000f80 <Gyro_getx>
 8000cd6:	eef0 7a40 	vmov.f32	s15, s0
}
 8000cda:	eeb0 0a67 	vmov.f32	s0, s15
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <enable_clock>:
	config_button->Mode = GPIO_MODE_INPUT;
	enable_clock();
	HAL_GPIO_Init(GPIOA,config_button);
}

void enable_clock(){
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
//	GPIO_enable_disable(PORT_A,ENABLE);
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <enable_clock+0x30>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <enable_clock+0x30>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <enable_clock+0x30>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <init_intrp_mode>:
		return false;
	}
	return 0;
}

void init_intrp_mode(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef interrupt = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
//	interrupt.pGPIOx = PORT_A;
	interrupt.Pin = PIN_NUMBER;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
	interrupt.Mode = GPIO_MODE_IT_RISING;
 8000d2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d30:	60bb      	str	r3, [r7, #8]
	interrupt.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
	enable_clock();
 8000d36:	f7ff ffd3 	bl	8000ce0 <enable_clock>
	HAL_GPIO_Init(GPIOA,&interrupt);
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <init_intrp_mode+0x40>)
 8000d40:	f001 feca 	bl	8002ad8 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQ_NUMBER);
 8000d44:	2006      	movs	r0, #6
 8000d46:	f001 fe90 	bl	8002a6a <HAL_NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020000 	.word	0x40020000

08000d58 <APPLICATION_ASSERT>:
 *  Created on: Nov 9, 2023
 *      Author: aaronvan
 */

#include "ErrorHandling.h"
void APPLICATION_ASSERT(bool x){
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	if(x == false){
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f083 0301 	eor.w	r3, r3, #1
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d000      	beq.n	8000d70 <APPLICATION_ASSERT+0x18>
		while(1){
 8000d6e:	e7fe      	b.n	8000d6e <APPLICATION_ASSERT+0x16>
		}
	}
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <Gyro_init>:
static HAL_StatusTypeDef halstatus;

float xAngle = 160;
float xGPosition = 0;

void Gyro_init(){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <Gyro_init+0xec>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a37      	ldr	r2, [pc, #220]	; (8000e68 <Gyro_init+0xec>)
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <Gyro_init+0xec>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0320 	and.w	r3, r3, #32
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
	gyro.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8000d9e:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <Gyro_init+0xf0>)
 8000da0:	f44f 7260 	mov.w	r2, #896	; 0x380
 8000da4:	601a      	str	r2, [r3, #0]
	gyro.Mode = GPIO_MODE_AF_PP;
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <Gyro_init+0xf0>)
 8000da8:	2202      	movs	r2, #2
 8000daa:	605a      	str	r2, [r3, #4]
	gyro.Alternate = GPIO_AF5_SPI5;
 8000dac:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <Gyro_init+0xf0>)
 8000dae:	2205      	movs	r2, #5
 8000db0:	611a      	str	r2, [r3, #16]
	gyro.Pull = GPIO_NOPULL;
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <Gyro_init+0xf0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
	gyro.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <Gyro_init+0xf0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOF, &gyro);
 8000dbe:	492b      	ldr	r1, [pc, #172]	; (8000e6c <Gyro_init+0xf0>)
 8000dc0:	482b      	ldr	r0, [pc, #172]	; (8000e70 <Gyro_init+0xf4>)
 8000dc2:	f001 fe89 	bl	8002ad8 <HAL_GPIO_Init>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <Gyro_init+0xec>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a26      	ldr	r2, [pc, #152]	; (8000e68 <Gyro_init+0xec>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <Gyro_init+0xec>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
	gyro.Pin = GPIO_PIN_1;
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <Gyro_init+0xf0>)
 8000de4:	2202      	movs	r2, #2
 8000de6:	601a      	str	r2, [r3, #0]
	gyro.Mode = GPIO_MODE_OUTPUT_OD;
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <Gyro_init+0xf0>)
 8000dea:	2211      	movs	r2, #17
 8000dec:	605a      	str	r2, [r3, #4]
	gyro.Alternate = GPIO_AF5_SPI5;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <Gyro_init+0xf0>)
 8000df0:	2205      	movs	r2, #5
 8000df2:	611a      	str	r2, [r3, #16]
	gyro.Pull = GPIO_PULLUP;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <Gyro_init+0xf0>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	609a      	str	r2, [r3, #8]
	gyro.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <Gyro_init+0xf0>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &gyro);
 8000e00:	491a      	ldr	r1, [pc, #104]	; (8000e6c <Gyro_init+0xf0>)
 8000e02:	481c      	ldr	r0, [pc, #112]	; (8000e74 <Gyro_init+0xf8>)
 8000e04:	f001 fe68 	bl	8002ad8 <HAL_GPIO_Init>
	Gyro_disable_slave_communication();
 8000e08:	f000 f8ae 	bl	8000f68 <Gyro_disable_slave_communication>


	SPI.Instance = SPI5;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <Gyro_init+0xfc>)
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <Gyro_init+0x100>)
 8000e10:	601a      	str	r2, [r3, #0]
	SPI.Init.Mode = SPI_MODE_MASTER;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <Gyro_init+0xfc>)
 8000e14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e18:	605a      	str	r2, [r3, #4]
	SPI.Init.Direction = SPI_DIRECTION_2LINES;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <Gyro_init+0xfc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
	SPI.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <Gyro_init+0xfc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
	SPI.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <Gyro_init+0xfc>)
 8000e28:	2202      	movs	r2, #2
 8000e2a:	611a      	str	r2, [r3, #16]
	SPI.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <Gyro_init+0xfc>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	615a      	str	r2, [r3, #20]
	SPI.Init.NSS = SPI_NSS_SOFT;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <Gyro_init+0xfc>)
 8000e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e38:	619a      	str	r2, [r3, #24]
	SPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <Gyro_init+0xfc>)
 8000e3c:	2228      	movs	r2, #40	; 0x28
 8000e3e:	61da      	str	r2, [r3, #28]
	SPI.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <Gyro_init+0xfc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	621a      	str	r2, [r3, #32]
	SPI.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <Gyro_init+0xfc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24
	SPI.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <Gyro_init+0xfc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
	SPI.Init.CRCPolynomial = 0;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <Gyro_init+0xfc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(&SPI);
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <Gyro_init+0xfc>)
 8000e5a:	f003 fa71 	bl	8004340 <HAL_SPI_Init>


}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	2000008c 	.word	0x2000008c
 8000e70:	40021400 	.word	0x40021400
 8000e74:	40020800 	.word	0x40020800
 8000e78:	200000a0 	.word	0x200000a0
 8000e7c:	40015000 	.word	0x40015000

08000e80 <Gyro_configure_regs>:
	Gyro_disable_slave_communication();

	Gyro_verify_HAL_status();
}

void Gyro_configure_regs(){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	uint16_t regis = 0xF;
 8000e86:	230f      	movs	r3, #15
 8000e88:	80fb      	strh	r3, [r7, #6]
	uint16_t send = (WRITE | CTRL_REG1) | (regis << 8);
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	f043 0320 	orr.w	r3, r3, #32
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	80bb      	strh	r3, [r7, #4]
	Gyro_enable_slave_communication();
 8000e9a:	f000 f859 	bl	8000f50 <Gyro_enable_slave_communication>
	HAL_SPI_Transmit(&SPI, (uint8_t*)&send, 2, DELAY);
 8000e9e:	1d39      	adds	r1, r7, #4
 8000ea0:	23c8      	movs	r3, #200	; 0xc8
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	4822      	ldr	r0, [pc, #136]	; (8000f30 <Gyro_configure_regs+0xb0>)
 8000ea6:	f003 fafc 	bl	80044a2 <HAL_SPI_Transmit>
	Gyro_disable_slave_communication();
 8000eaa:	f000 f85d 	bl	8000f68 <Gyro_disable_slave_communication>

	regis = 0x10;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	80fb      	strh	r3, [r7, #6]
	send = (WRITE | CTRL_REG4) | (regis << 8);
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	80bb      	strh	r3, [r7, #4]
	Gyro_enable_slave_communication();
 8000ec2:	f000 f845 	bl	8000f50 <Gyro_enable_slave_communication>
	HAL_SPI_Transmit(&SPI, (uint8_t*)&send, 2, DELAY);
 8000ec6:	1d39      	adds	r1, r7, #4
 8000ec8:	23c8      	movs	r3, #200	; 0xc8
 8000eca:	2202      	movs	r2, #2
 8000ecc:	4818      	ldr	r0, [pc, #96]	; (8000f30 <Gyro_configure_regs+0xb0>)
 8000ece:	f003 fae8 	bl	80044a2 <HAL_SPI_Transmit>
	Gyro_disable_slave_communication();
 8000ed2:	f000 f849 	bl	8000f68 <Gyro_disable_slave_communication>


	regis = 0xC0;
 8000ed6:	23c0      	movs	r3, #192	; 0xc0
 8000ed8:	80fb      	strh	r3, [r7, #6]
	send = (WRITE | CTRL_REG5) | (regis << 8);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000ee4:	b21b      	sxth	r3, r3
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	80bb      	strh	r3, [r7, #4]
	Gyro_enable_slave_communication();
 8000eea:	f000 f831 	bl	8000f50 <Gyro_enable_slave_communication>
	HAL_SPI_Transmit(&SPI, (uint8_t*)&send, 2, DELAY);
 8000eee:	1d39      	adds	r1, r7, #4
 8000ef0:	23c8      	movs	r3, #200	; 0xc8
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	480e      	ldr	r0, [pc, #56]	; (8000f30 <Gyro_configure_regs+0xb0>)
 8000ef6:	f003 fad4 	bl	80044a2 <HAL_SPI_Transmit>
	Gyro_disable_slave_communication();
 8000efa:	f000 f835 	bl	8000f68 <Gyro_disable_slave_communication>


	regis = 0x40;
 8000efe:	2340      	movs	r3, #64	; 0x40
 8000f00:	80fb      	strh	r3, [r7, #6]
	send = (WRITE | FIFO_CTRL_REG) | (regis << 8);
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	f043 032e 	orr.w	r3, r3, #46	; 0x2e
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	80bb      	strh	r3, [r7, #4]
	Gyro_enable_slave_communication();
 8000f12:	f000 f81d 	bl	8000f50 <Gyro_enable_slave_communication>
	HAL_SPI_Transmit(&SPI, (uint8_t*)&send, 2, DELAY);
 8000f16:	1d39      	adds	r1, r7, #4
 8000f18:	23c8      	movs	r3, #200	; 0xc8
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <Gyro_configure_regs+0xb0>)
 8000f1e:	f003 fac0 	bl	80044a2 <HAL_SPI_Transmit>
	Gyro_disable_slave_communication();
 8000f22:	f000 f821 	bl	8000f68 <Gyro_disable_slave_communication>

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000a0 	.word	0x200000a0

08000f34 <Gyro_verify_HAL_status>:

void Gyro_verify_HAL_status(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	if(halstatus != HAL_OK){
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <Gyro_verify_HAL_status+0x18>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <Gyro_verify_HAL_status+0x12>
		APPLICATION_ASSERT(false);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f7ff ff09 	bl	8000d58 <APPLICATION_ASSERT>
	}
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000f8 	.word	0x200000f8

08000f50 <Gyro_enable_slave_communication>:

void Gyro_enable_slave_communication(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NCS_MEMS_SPI_PORT, MEMS_INT1_PIN, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2102      	movs	r1, #2
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <Gyro_enable_slave_communication+0x14>)
 8000f5a:	f002 f88d 	bl	8003078 <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020800 	.word	0x40020800

08000f68 <Gyro_disable_slave_communication>:

void Gyro_disable_slave_communication(){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NCS_MEMS_SPI_PORT, MEMS_INT1_PIN, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2102      	movs	r1, #2
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <Gyro_disable_slave_communication+0x14>)
 8000f72:	f002 f881 	bl	8003078 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020800 	.word	0x40020800

08000f80 <Gyro_getx>:
float Gyro_getx(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
	uint16_t lowx = getxlow();
 8000f86:	f000 f889 	bl	800109c <getxlow>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	81fb      	strh	r3, [r7, #14]
	uint16_t highx = getxhigh();
 8000f8e:	f000 f855 	bl	800103c <getxhigh>
 8000f92:	4603      	mov	r3, r0
 8000f94:	81bb      	strh	r3, [r7, #12]
	highx = highx << 8;
 8000f96:	89bb      	ldrh	r3, [r7, #12]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	81bb      	strh	r3, [r7, #12]

	int16_t value = highx | lowx;
 8000f9c:	89ba      	ldrh	r2, [r7, #12]
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	817b      	strh	r3, [r7, #10]
	float xVelocity = (float)value * VAL;
 8000fa6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb2:	ee17 0a90 	vmov	r0, s15
 8000fb6:	f7ff fbf9 	bl	80007ac <__aeabi_f2d>
 8000fba:	a31e      	add	r3, pc, #120	; (adr r3, 8001034 <Gyro_getx+0xb4>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff f966 	bl	8000290 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fc46 	bl	800085c <__aeabi_d2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	607b      	str	r3, [r7, #4]

	if((xGPosition > 281) || (xGPosition < 30)){
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <Gyro_getx+0xa8>)
 8000fd6:	edd3 7a00 	vldr	s15, [r3]
 8000fda:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800102c <Gyro_getx+0xac>
 8000fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe6:	dc09      	bgt.n	8000ffc <Gyro_getx+0x7c>
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <Gyro_getx+0xa8>)
 8000fea:	edd3 7a00 	vldr	s15, [r3]
 8000fee:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	d502      	bpl.n	8001002 <Gyro_getx+0x82>
		xGPosition = 160;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <Gyro_getx+0xa8>)
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <Gyro_getx+0xb0>)
 8001000:	601a      	str	r2, [r3, #0]
	}
	float xGPosition = xGPosition + xVelocity;
 8001002:	ed97 7a00 	vldr	s14, [r7]
 8001006:	edd7 7a01 	vldr	s15, [r7, #4]
 800100a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100e:	edc7 7a00 	vstr	s15, [r7]

	return xGPosition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	ee07 3a90 	vmov	s15, r3
}
 8001018:	eeb0 0a67 	vmov.f32	s0, s15
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	f3af 8000 	nop.w
 8001028:	200000fc 	.word	0x200000fc
 800102c:	438c8000 	.word	0x438c8000
 8001030:	43200000 	.word	0x43200000
 8001034:	36666666 	.word	0x36666666
 8001038:	3eedd1a2 	.word	0x3eedd1a2

0800103c <getxhigh>:

uint16_t getxhigh(){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af02      	add	r7, sp, #8
	uint16_t rec = 0x0;
 8001042:	2300      	movs	r3, #0
 8001044:	80fb      	strh	r3, [r7, #6]
	uint16_t send = (READ | OUT_X_H);
 8001046:	23a9      	movs	r3, #169	; 0xa9
 8001048:	80bb      	strh	r3, [r7, #4]
	Gyro_enable_slave_communication();
 800104a:	f7ff ff81 	bl	8000f50 <Gyro_enable_slave_communication>
	while(HAL_GPIO_ReadPin(NCS_MEMS_SPI_PORT,NCS_MEMS_SPI_PIN) != GPIO_PIN_RESET);
 800104e:	bf00      	nop
 8001050:	2102      	movs	r1, #2
 8001052:	480f      	ldr	r0, [pc, #60]	; (8001090 <getxhigh+0x54>)
 8001054:	f001 fff8 	bl	8003048 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f8      	bne.n	8001050 <getxhigh+0x14>
	halstatus = HAL_SPI_TransmitReceive(&SPI, (uint8_t*)&send, (uint8_t*)&rec, 2, DELAY);
 800105e:	1dba      	adds	r2, r7, #6
 8001060:	1d39      	adds	r1, r7, #4
 8001062:	23c8      	movs	r3, #200	; 0xc8
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2302      	movs	r3, #2
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <getxhigh+0x58>)
 800106a:	f003 fb56 	bl	800471a <HAL_SPI_TransmitReceive>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <getxhigh+0x5c>)
 8001074:	701a      	strb	r2, [r3, #0]
	Gyro_disable_slave_communication();
 8001076:	f7ff ff77 	bl	8000f68 <Gyro_disable_slave_communication>

	Gyro_verify_HAL_status();
 800107a:	f7ff ff5b 	bl	8000f34 <Gyro_verify_HAL_status>
	rec = ((0xFF00 & rec) >> 8);
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	b29b      	uxth	r3, r3
 8001084:	80fb      	strh	r3, [r7, #6]
	return rec;
 8001086:	88fb      	ldrh	r3, [r7, #6]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020800 	.word	0x40020800
 8001094:	200000a0 	.word	0x200000a0
 8001098:	200000f8 	.word	0x200000f8

0800109c <getxlow>:

uint16_t getxlow(){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af02      	add	r7, sp, #8
	uint16_t rec = 0x0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	80fb      	strh	r3, [r7, #6]
	uint16_t send = (READ | OUT_X_L);
 80010a6:	23a8      	movs	r3, #168	; 0xa8
 80010a8:	80bb      	strh	r3, [r7, #4]
	Gyro_enable_slave_communication();
 80010aa:	f7ff ff51 	bl	8000f50 <Gyro_enable_slave_communication>
	while(HAL_GPIO_ReadPin(NCS_MEMS_SPI_PORT,NCS_MEMS_SPI_PIN) != GPIO_PIN_RESET);
 80010ae:	bf00      	nop
 80010b0:	2102      	movs	r1, #2
 80010b2:	480f      	ldr	r0, [pc, #60]	; (80010f0 <getxlow+0x54>)
 80010b4:	f001 ffc8 	bl	8003048 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f8      	bne.n	80010b0 <getxlow+0x14>
	halstatus = HAL_SPI_TransmitReceive(&SPI, (uint8_t*)&send, (uint8_t*)&rec, 2, DELAY);
 80010be:	1dba      	adds	r2, r7, #6
 80010c0:	1d39      	adds	r1, r7, #4
 80010c2:	23c8      	movs	r3, #200	; 0xc8
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2302      	movs	r3, #2
 80010c8:	480a      	ldr	r0, [pc, #40]	; (80010f4 <getxlow+0x58>)
 80010ca:	f003 fb26 	bl	800471a <HAL_SPI_TransmitReceive>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <getxlow+0x5c>)
 80010d4:	701a      	strb	r2, [r3, #0]
	Gyro_disable_slave_communication();
 80010d6:	f7ff ff47 	bl	8000f68 <Gyro_disable_slave_communication>

	Gyro_verify_HAL_status();
 80010da:	f7ff ff2b 	bl	8000f34 <Gyro_verify_HAL_status>
	rec = ((0xFF00 & rec) >> 8);
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	80fb      	strh	r3, [r7, #6]
	return rec;
 80010e6:	88fb      	ldrh	r3, [r7, #6]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40020800 	.word	0x40020800
 80010f4:	200000a0 	.word	0x200000a0
 80010f8:	200000f8 	.word	0x200000f8

080010fc <IRQ_enable_intrp>:
 *
 *  Created on: Oct 3, 2023
 *      Author: aaronvan
 */
#include "interruptControl.h"
void IRQ_enable_intrp(uint8_t num){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
//	}
//
//	if(num >= 32){
//		*NVIC_ISER1 |= (1 << num%32);
//	}
	HAL_NVIC_EnableIRQ(num);
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fcad 	bl	8002a6a <HAL_NVIC_EnableIRQ>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <IRQ_disable_intrp>:

void IRQ_disable_intrp(uint8_t num){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
//	}
//
//	if(num >= 32){
//		*NVIC_ICER1 |= (1 << num%32);
//	}
	HAL_NVIC_DisableIRQ(num);
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fcad 	bl	8002a86 <HAL_NVIC_DisableIRQ>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <IRQ_clear_pending_intrp>:

void IRQ_clear_pending_intrp(uint8_t num){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
//	}
//
//	if(num >= 32){
//		*NVIC_ICPR1 |= (1 << num%32);
//	}
	HAL_NVIC_ClearPendingIRQ(num);
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fcb9 	bl	8002aba <HAL_NVIC_ClearPendingIRQ>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <EXTI_clear_pending_intrp>:
//		*NVIC_ISPR1 |= (1 << num%32);
//	}
	HAL_NVIC_SetPendingIRQ(num);
}

void EXTI_clear_pending_intrp(uint8_t num){
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (1 << num);
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <EXTI_clear_pending_intrp+0x2c>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	79fa      	ldrb	r2, [r7, #7]
 8001160:	2101      	movs	r1, #1
 8001162:	fa01 f202 	lsl.w	r2, r1, r2
 8001166:	4611      	mov	r1, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <EXTI_clear_pending_intrp+0x2c>)
 800116a:	430b      	orrs	r3, r1
 800116c:	6153      	str	r3, [r2, #20]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40013c00 	.word	0x40013c00

08001180 <LCD_GPIO_Init>:
static void SPI_Error(void);

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */

void LCD_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
 800118a:	4b5a      	ldr	r3, [pc, #360]	; (80012f4 <LCD_GPIO_Init+0x174>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a59      	ldr	r2, [pc, #356]	; (80012f4 <LCD_GPIO_Init+0x174>)
 8001190:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b57      	ldr	r3, [pc, #348]	; (80012f4 <LCD_GPIO_Init+0x174>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <LCD_GPIO_Init+0x174>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <LCD_GPIO_Init+0x174>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <LCD_GPIO_Init+0x174>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <LCD_GPIO_Init+0x174>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <LCD_GPIO_Init+0x174>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b49      	ldr	r3, [pc, #292]	; (80012f4 <LCD_GPIO_Init+0x174>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <LCD_GPIO_Init+0x174>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a44      	ldr	r2, [pc, #272]	; (80012f4 <LCD_GPIO_Init+0x174>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <LCD_GPIO_Init+0x174>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <LCD_GPIO_Init+0x174>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <LCD_GPIO_Init+0x174>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <LCD_GPIO_Init+0x174>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <LCD_GPIO_Init+0x174>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <LCD_GPIO_Init+0x174>)
 800121c:	f043 0320 	orr.w	r3, r3, #32
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <LCD_GPIO_Init+0x174>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <LCD_GPIO_Init+0x174>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <LCD_GPIO_Init+0x174>)
 8001238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <LCD_GPIO_Init+0x174>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800124a:	f641 0358 	movw	r3, #6232	; 0x1858
 800124e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001258:	2302      	movs	r3, #2
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800125c:	230e      	movs	r3, #14
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	4824      	ldr	r0, [pc, #144]	; (80012f8 <LCD_GPIO_Init+0x178>)
 8001268:	f001 fc36 	bl	8002ad8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800126c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001270:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	4820      	ldr	r0, [pc, #128]	; (80012fc <LCD_GPIO_Init+0x17c>)
 800127a:	f001 fc2d 	bl	8002ad8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800127e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	481d      	ldr	r0, [pc, #116]	; (8001300 <LCD_GPIO_Init+0x180>)
 800128c:	f001 fc24 	bl	8002ad8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001290:	2348      	movs	r3, #72	; 0x48
 8001292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	481a      	ldr	r0, [pc, #104]	; (8001304 <LCD_GPIO_Init+0x184>)
 800129c:	f001 fc1c 	bl	8002ad8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80012a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4816      	ldr	r0, [pc, #88]	; (8001308 <LCD_GPIO_Init+0x188>)
 80012ae:	f001 fc13 	bl	8002ad8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80012b2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80012b6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	4813      	ldr	r0, [pc, #76]	; (800130c <LCD_GPIO_Init+0x18c>)
 80012c0:	f001 fc0a 	bl	8002ad8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80012c4:	2303      	movs	r3, #3
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80012c8:	2309      	movs	r3, #9
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	480a      	ldr	r0, [pc, #40]	; (80012fc <LCD_GPIO_Init+0x17c>)
 80012d4:	f001 fc00 	bl	8002ad8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80012d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <LCD_GPIO_Init+0x18c>)
 80012e6:	f001 fbf7 	bl	8002ad8 <HAL_GPIO_Init>
}
 80012ea:	bf00      	nop
 80012ec:	3730      	adds	r7, #48	; 0x30
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020800 	.word	0x40020800
 8001304:	40020c00 	.word	0x40020c00
 8001308:	40021400 	.word	0x40021400
 800130c:	40021800 	.word	0x40021800

08001310 <LTCD__Init>:


void LTCD__Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 8001314:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <LTCD__Init+0xb0>)
 8001316:	4a2b      	ldr	r2, [pc, #172]	; (80013c4 <LTCD__Init+0xb4>)
 8001318:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <LTCD__Init+0xb0>)
 800131c:	2209      	movs	r2, #9
 800131e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <LTCD__Init+0xb0>)
 8001322:	2201      	movs	r2, #1
 8001324:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <LTCD__Init+0xb0>)
 8001328:	221d      	movs	r2, #29
 800132a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <LTCD__Init+0xb0>)
 800132e:	2203      	movs	r2, #3
 8001330:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <LTCD__Init+0xb0>)
 8001334:	f240 120d 	movw	r2, #269	; 0x10d
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <LTCD__Init+0xb0>)
 800133c:	f240 1243 	movw	r2, #323	; 0x143
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <LTCD__Init+0xb0>)
 8001344:	f240 1217 	movw	r2, #279	; 0x117
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <LTCD__Init+0xb0>)
 800134c:	f240 1247 	movw	r2, #327	; 0x147
 8001350:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <LTCD__Init+0xb0>)
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <LTCD__Init+0xb0>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <LTCD__Init+0xb0>)
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <LTCD__Init+0xb8>)
 800136c:	2208      	movs	r2, #8
 800136e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <LTCD__Init+0xb8>)
 8001372:	22c0      	movs	r2, #192	; 0xc0
 8001374:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <LTCD__Init+0xb8>)
 8001378:	2204      	movs	r2, #4
 800137a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <LTCD__Init+0xb8>)
 800137e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001384:	4810      	ldr	r0, [pc, #64]	; (80013c8 <LTCD__Init+0xb8>)
 8001386:	f002 fd9b 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <LTCD__Init+0xb0>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <LTCD__Init+0xb0>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <LTCD__Init+0xb0>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <LTCD__Init+0xb0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80013a2:	f7ff feed 	bl	8001180 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <LTCD__Init+0xb0>)
 80013a8:	f001 fe80 	bl	80030ac <HAL_LTDC_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80013b2:	f000 f98f 	bl	80016d4 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80013b6:	f000 fa81 	bl	80018bc <ili9341_Init>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000100 	.word	0x20000100
 80013c4:	40016800 	.word	0x40016800
 80013c8:	200001a8 	.word	0x200001a8

080013cc <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b090      	sub	sp, #64	; 0x40
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80013da:	23f0      	movs	r3, #240	; 0xf0
 80013dc:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80013e2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013e6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80013e8:	2302      	movs	r3, #2
 80013ea:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80013ec:	23ff      	movs	r3, #255	; 0xff
 80013ee:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80013f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013fa:	2305      	movs	r3, #5
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <LTCD_Layer_Init+0x78>)
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001408:	23f0      	movs	r3, #240	; 0xf0
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800140c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001424:	79fa      	ldrb	r2, [r7, #7]
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	4619      	mov	r1, r3
 800142c:	4806      	ldr	r0, [pc, #24]	; (8001448 <LTCD_Layer_Init+0x7c>)
 800142e:	f001 ff0d 	bl	800324c <HAL_LTDC_ConfigLayer>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001438:	f000 f94c 	bl	80016d4 <LCD_Error_Handler>
	}

}
 800143c:	bf00      	nop
 800143e:	3740      	adds	r7, #64	; 0x40
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000234 	.word	0x20000234
 8001448:	20000100 	.word	0x20000100

0800144c <LCD_Draw_Pixel>:

// Draws a single pixel, should be useds only within this fileset and should not be seen by external clients. 
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
 8001456:	460b      	mov	r3, r1
 8001458:	80bb      	strh	r3, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800145e:	88ba      	ldrh	r2, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	461a      	mov	r2, r3
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	4413      	add	r3, r2
 800146e:	4905      	ldr	r1, [pc, #20]	; (8001484 <LCD_Draw_Pixel+0x38>)
 8001470:	887a      	ldrh	r2, [r7, #2]
 8001472:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000234 	.word	0x20000234

08001488 <LCD_DrawChar>:


void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	603a      	str	r2, [r7, #0]
 8001492:	80fb      	strh	r3, [r7, #6]
 8001494:	460b      	mov	r3, r1
 8001496:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	e04c      	b.n	8001540 <LCD_DrawChar+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	e03f      	b.n	800152c <LCD_DrawChar+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	4619      	mov	r1, r3
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <LCD_DrawChar+0xd0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	889b      	ldrh	r3, [r3, #4]
 80014be:	4a27      	ldr	r2, [pc, #156]	; (800155c <LCD_DrawChar+0xd4>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	08db      	lsrs	r3, r3, #3
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	409a      	lsls	r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	fa42 f303 	asr.w	r3, r2, r3
 80014d4:	400b      	ands	r3, r1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d104      	bne.n	80014e4 <LCD_DrawChar+0x5c>
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <LCD_DrawChar+0xd0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	889b      	ldrh	r3, [r3, #4]
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d920      	bls.n	8001526 <LCD_DrawChar+0x9e>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	fa42 f303 	asr.w	r3, r2, r3
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d104      	bne.n	8001508 <LCD_DrawChar+0x80>
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <LCD_DrawChar+0xd0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	889b      	ldrh	r3, [r3, #4]
 8001504:	2b0c      	cmp	r3, #12
 8001506:	d80e      	bhi.n	8001526 <LCD_DrawChar+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	b29a      	uxth	r2, r3
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	4413      	add	r3, r2
 8001510:	b298      	uxth	r0, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	b29a      	uxth	r2, r3
 8001516:	88bb      	ldrh	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	b29b      	uxth	r3, r3
 800151c:	4a10      	ldr	r2, [pc, #64]	; (8001560 <LCD_DrawChar+0xd8>)
 800151e:	8812      	ldrh	r2, [r2, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff ff93 	bl	800144c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3301      	adds	r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <LCD_DrawChar+0xd0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	461a      	mov	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	4293      	cmp	r3, r2
 8001538:	d3b8      	bcc.n	80014ac <LCD_DrawChar+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <LCD_DrawChar+0xd0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	88db      	ldrh	r3, [r3, #6]
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4293      	cmp	r3, r2
 800154c:	d3ab      	bcc.n	80014a6 <LCD_DrawChar+0x1e>
      }
    }
  }
}
 800154e:	bf00      	nop
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200001d8 	.word	0x200001d8
 800155c:	aaaaaaab 	.word	0xaaaaaaab
 8001560:	20000000 	.word	0x20000000

08001564 <LCD_DisplayChar>:

// Displays Char
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
 800156e:	460b      	mov	r3, r1
 8001570:	80bb      	strh	r3, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	3b20      	subs	r3, #32
 800157a:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <LCD_DisplayChar+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	4907      	ldr	r1, [pc, #28]	; (80015a4 <LCD_DisplayChar+0x40>)
 8001586:	6809      	ldr	r1, [r1, #0]
 8001588:	88c9      	ldrh	r1, [r1, #6]
 800158a:	fb01 f303 	mul.w	r3, r1, r3
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	441a      	add	r2, r3
 8001592:	88b9      	ldrh	r1, [r7, #4]
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff76 	bl	8001488 <LCD_DrawChar>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200001d8 	.word	0x200001d8

080015a8 <LCD_SetTextColor>:

void LCD_SetTextColor(uint16_t Color)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80015b2:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <LCD_SetTextColor+0x1c>)
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	8013      	strh	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	20000000 	.word	0x20000000

080015c8 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <LCD_SetFont+0x1c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200001d8 	.word	0x200001d8

080015e8 <LCD_Draw_Circle_Fill>:

// Draw Circle Filled
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4604      	mov	r4, r0
 80015f0:	4608      	mov	r0, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	4623      	mov	r3, r4
 80015f8:	80fb      	strh	r3, [r7, #6]
 80015fa:	4603      	mov	r3, r0
 80015fc:	80bb      	strh	r3, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	807b      	strh	r3, [r7, #2]
 8001602:	4613      	mov	r3, r2
 8001604:	803b      	strh	r3, [r7, #0]
  for(int16_t y=-radius; y<=radius; y++)
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	425b      	negs	r3, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	81fb      	strh	r3, [r7, #14]
 800160e:	e034      	b.n	800167a <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	425b      	negs	r3, r3
 8001614:	b29b      	uxth	r3, r3
 8001616:	81bb      	strh	r3, [r7, #12]
 8001618:	e024      	b.n	8001664 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 800161a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800161e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001622:	fb03 f202 	mul.w	r2, r3, r2
 8001626:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800162a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	441a      	add	r2, r3
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	8879      	ldrh	r1, [r7, #2]
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	429a      	cmp	r2, r3
 800163e:	dc0b      	bgt.n	8001658 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001640:	89ba      	ldrh	r2, [r7, #12]
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	4413      	add	r3, r2
 8001646:	b298      	uxth	r0, r3
 8001648:	89fa      	ldrh	r2, [r7, #14]
 800164a:	88bb      	ldrh	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	b29b      	uxth	r3, r3
 8001650:	883a      	ldrh	r2, [r7, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff fefa 	bl	800144c <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001658:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800165c:	b29b      	uxth	r3, r3
 800165e:	3301      	adds	r3, #1
 8001660:	b29b      	uxth	r3, r3
 8001662:	81bb      	strh	r3, [r7, #12]
 8001664:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	429a      	cmp	r2, r3
 800166c:	ddd5      	ble.n	800161a <LCD_Draw_Circle_Fill+0x32>
  for(int16_t y=-radius; y<=radius; y++)
 800166e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001672:	b29b      	uxth	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	81fb      	strh	r3, [r7, #14]
 800167a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	429a      	cmp	r2, r3
 8001682:	ddc5      	ble.n	8001610 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bd90      	pop	{r4, r7, pc}
	...

08001690 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	460a      	mov	r2, r1
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	4613      	mov	r3, r2
 800169e:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10e      	bne.n	80016c4 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e007      	b.n	80016bc <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80016ac:	4908      	ldr	r1, [pc, #32]	; (80016d0 <LCD_Clear+0x40>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	88ba      	ldrh	r2, [r7, #4]
 80016b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3301      	adds	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80016c2:	d3f3      	bcc.n	80016ac <LCD_Clear+0x1c>
		}
	}
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	20000234 	.word	0x20000234

080016d4 <LCD_Error_Handler>:

void LCD_Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 80016d8:	e7fe      	b.n	80016d8 <LCD_Error_Handler+0x4>

080016da <Display_Ball>:
	LCD_DisplayChar(20,20,'I');
	LCD_DisplayChar(30,20,'M');
	LCD_DisplayChar(40,20,'E');
}

void Display_Ball(float value){
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	ed87 0a01 	vstr	s0, [r7, #4]
	LCD_Clear(0,LCD_COLOR_WHITE);
 80016e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff ffd1 	bl	8001690 <LCD_Clear>
	LCD_Draw_Circle_Fill(120,(int16_t)value,20,LCD_COLOR_BLACK);
 80016ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f6:	ee17 3a90 	vmov	r3, s15
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	b299      	uxth	r1, r3
 80016fe:	2300      	movs	r3, #0
 8001700:	2214      	movs	r2, #20
 8001702:	2078      	movs	r0, #120	; 0x78
 8001704:	f7ff ff70 	bl	80015e8 <LCD_Draw_Circle_Fill>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <startScreen>:

void startScreen(){
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_MAGENTA);
 8001714:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff ffb9 	bl	8001690 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff ff42 	bl	80015a8 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001724:	4845      	ldr	r0, [pc, #276]	; (800183c <startScreen+0x12c>)
 8001726:	f7ff ff4f 	bl	80015c8 <LCD_SetFont>

	LCD_DisplayChar(40,140,'O');
 800172a:	224f      	movs	r2, #79	; 0x4f
 800172c:	218c      	movs	r1, #140	; 0x8c
 800172e:	2028      	movs	r0, #40	; 0x28
 8001730:	f7ff ff18 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(55,140,'N');
 8001734:	224e      	movs	r2, #78	; 0x4e
 8001736:	218c      	movs	r1, #140	; 0x8c
 8001738:	2037      	movs	r0, #55	; 0x37
 800173a:	f7ff ff13 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(65,140,' ');
 800173e:	2220      	movs	r2, #32
 8001740:	218c      	movs	r1, #140	; 0x8c
 8001742:	2041      	movs	r0, #65	; 0x41
 8001744:	f7ff ff0e 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(80,140,'Y');
 8001748:	2259      	movs	r2, #89	; 0x59
 800174a:	218c      	movs	r1, #140	; 0x8c
 800174c:	2050      	movs	r0, #80	; 0x50
 800174e:	f7ff ff09 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(95,140,'O');
 8001752:	224f      	movs	r2, #79	; 0x4f
 8001754:	218c      	movs	r1, #140	; 0x8c
 8001756:	205f      	movs	r0, #95	; 0x5f
 8001758:	f7ff ff04 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(110,140,'U');
 800175c:	2255      	movs	r2, #85	; 0x55
 800175e:	218c      	movs	r1, #140	; 0x8c
 8001760:	206e      	movs	r0, #110	; 0x6e
 8001762:	f7ff feff 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'R');
 8001766:	2252      	movs	r2, #82	; 0x52
 8001768:	218c      	movs	r1, #140	; 0x8c
 800176a:	207d      	movs	r0, #125	; 0x7d
 800176c:	f7ff fefa 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,' ');
 8001770:	2220      	movs	r2, #32
 8001772:	218c      	movs	r1, #140	; 0x8c
 8001774:	2087      	movs	r0, #135	; 0x87
 8001776:	f7ff fef5 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'M');
 800177a:	224d      	movs	r2, #77	; 0x4d
 800177c:	218c      	movs	r1, #140	; 0x8c
 800177e:	2096      	movs	r0, #150	; 0x96
 8001780:	f7ff fef0 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'A');
 8001784:	2241      	movs	r2, #65	; 0x41
 8001786:	218c      	movs	r1, #140	; 0x8c
 8001788:	20a5      	movs	r0, #165	; 0xa5
 800178a:	f7ff feeb 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(180,140,'R');
 800178e:	2252      	movs	r2, #82	; 0x52
 8001790:	218c      	movs	r1, #140	; 0x8c
 8001792:	20b4      	movs	r0, #180	; 0xb4
 8001794:	f7ff fee6 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(195,140,'K');
 8001798:	224b      	movs	r2, #75	; 0x4b
 800179a:	218c      	movs	r1, #140	; 0x8c
 800179c:	20c3      	movs	r0, #195	; 0xc3
 800179e:	f7ff fee1 	bl	8001564 <LCD_DisplayChar>


	HAL_Delay(1000);
 80017a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a6:	f001 f803 	bl	80027b0 <HAL_Delay>

	LCD_Clear(0,LCD_COLOR_BLUE2);
 80017aa:	f240 511f 	movw	r1, #1311	; 0x51f
 80017ae:	2000      	movs	r0, #0
 80017b0:	f7ff ff6e 	bl	8001690 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff fef7 	bl	80015a8 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80017ba:	4820      	ldr	r0, [pc, #128]	; (800183c <startScreen+0x12c>)
 80017bc:	f7ff ff04 	bl	80015c8 <LCD_SetFont>

	LCD_DisplayChar(60,140,'G');
 80017c0:	2247      	movs	r2, #71	; 0x47
 80017c2:	218c      	movs	r1, #140	; 0x8c
 80017c4:	203c      	movs	r0, #60	; 0x3c
 80017c6:	f7ff fecd 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'E');
 80017ca:	2245      	movs	r2, #69	; 0x45
 80017cc:	218c      	movs	r1, #140	; 0x8c
 80017ce:	204b      	movs	r0, #75	; 0x4b
 80017d0:	f7ff fec8 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'T');
 80017d4:	2254      	movs	r2, #84	; 0x54
 80017d6:	218c      	movs	r1, #140	; 0x8c
 80017d8:	205a      	movs	r0, #90	; 0x5a
 80017da:	f7ff fec3 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(110,140,'S');
 80017de:	2253      	movs	r2, #83	; 0x53
 80017e0:	218c      	movs	r1, #140	; 0x8c
 80017e2:	206e      	movs	r0, #110	; 0x6e
 80017e4:	f7ff febe 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'E');
 80017e8:	2245      	movs	r2, #69	; 0x45
 80017ea:	218c      	movs	r1, #140	; 0x8c
 80017ec:	207d      	movs	r0, #125	; 0x7d
 80017ee:	f7ff feb9 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'T');
 80017f2:	2254      	movs	r2, #84	; 0x54
 80017f4:	218c      	movs	r1, #140	; 0x8c
 80017f6:	208c      	movs	r0, #140	; 0x8c
 80017f8:	f7ff feb4 	bl	8001564 <LCD_DisplayChar>

	HAL_Delay(1000);
 80017fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001800:	f000 ffd6 	bl	80027b0 <HAL_Delay>

	LCD_Clear(0,LCD_COLOR_GREEN);
 8001804:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff ff41 	bl	8001690 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff feca 	bl	80015a8 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001814:	4809      	ldr	r0, [pc, #36]	; (800183c <startScreen+0x12c>)
 8001816:	f7ff fed7 	bl	80015c8 <LCD_SetFont>

	LCD_DisplayChar(75,140,'G');
 800181a:	2247      	movs	r2, #71	; 0x47
 800181c:	218c      	movs	r1, #140	; 0x8c
 800181e:	204b      	movs	r0, #75	; 0x4b
 8001820:	f7ff fea0 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(95,140,'O');
 8001824:	224f      	movs	r2, #79	; 0x4f
 8001826:	218c      	movs	r1, #140	; 0x8c
 8001828:	205f      	movs	r0, #95	; 0x5f
 800182a:	f7ff fe9b 	bl	8001564 <LCD_DisplayChar>

	HAL_Delay(1000);
 800182e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001832:	f000 ffbd 	bl	80027b0 <HAL_Delay>
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000008 	.word	0x20000008

08001840 <gameOver>:

void gameOver(){
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_RED);
 8001844:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff ff21 	bl	8001690 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff feaa 	bl	80015a8 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001854:	4818      	ldr	r0, [pc, #96]	; (80018b8 <gameOver+0x78>)
 8001856:	f7ff feb7 	bl	80015c8 <LCD_SetFont>

	LCD_DisplayChar(60,140,'G');
 800185a:	2247      	movs	r2, #71	; 0x47
 800185c:	218c      	movs	r1, #140	; 0x8c
 800185e:	203c      	movs	r0, #60	; 0x3c
 8001860:	f7ff fe80 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'A');
 8001864:	2241      	movs	r2, #65	; 0x41
 8001866:	218c      	movs	r1, #140	; 0x8c
 8001868:	204b      	movs	r0, #75	; 0x4b
 800186a:	f7ff fe7b 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'M');
 800186e:	224d      	movs	r2, #77	; 0x4d
 8001870:	218c      	movs	r1, #140	; 0x8c
 8001872:	205a      	movs	r0, #90	; 0x5a
 8001874:	f7ff fe76 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(105,140,'E');
 8001878:	2245      	movs	r2, #69	; 0x45
 800187a:	218c      	movs	r1, #140	; 0x8c
 800187c:	2069      	movs	r0, #105	; 0x69
 800187e:	f7ff fe71 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,' ');
 8001882:	2220      	movs	r2, #32
 8001884:	218c      	movs	r1, #140	; 0x8c
 8001886:	2073      	movs	r0, #115	; 0x73
 8001888:	f7ff fe6c 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'O');
 800188c:	224f      	movs	r2, #79	; 0x4f
 800188e:	218c      	movs	r1, #140	; 0x8c
 8001890:	207d      	movs	r0, #125	; 0x7d
 8001892:	f7ff fe67 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'V');
 8001896:	2256      	movs	r2, #86	; 0x56
 8001898:	218c      	movs	r1, #140	; 0x8c
 800189a:	208c      	movs	r0, #140	; 0x8c
 800189c:	f7ff fe62 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'E');
 80018a0:	2245      	movs	r2, #69	; 0x45
 80018a2:	218c      	movs	r1, #140	; 0x8c
 80018a4:	209b      	movs	r0, #155	; 0x9b
 80018a6:	f7ff fe5d 	bl	8001564 <LCD_DisplayChar>
	LCD_DisplayChar(170,140,'R');
 80018aa:	2252      	movs	r2, #82	; 0x52
 80018ac:	218c      	movs	r1, #140	; 0x8c
 80018ae:	20aa      	movs	r0, #170	; 0xaa
 80018b0:	f7ff fe58 	bl	8001564 <LCD_DisplayChar>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000008 	.word	0x20000008

080018bc <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80018c0:	f000 f9fe 	bl	8001cc0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80018c4:	20ca      	movs	r0, #202	; 0xca
 80018c6:	f000 f943 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80018ca:	20c3      	movs	r0, #195	; 0xc3
 80018cc:	f000 f94d 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80018d0:	2008      	movs	r0, #8
 80018d2:	f000 f94a 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80018d6:	2050      	movs	r0, #80	; 0x50
 80018d8:	f000 f947 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80018dc:	20cf      	movs	r0, #207	; 0xcf
 80018de:	f000 f937 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 f941 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80018e8:	20c1      	movs	r0, #193	; 0xc1
 80018ea:	f000 f93e 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80018ee:	2030      	movs	r0, #48	; 0x30
 80018f0:	f000 f93b 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80018f4:	20ed      	movs	r0, #237	; 0xed
 80018f6:	f000 f92b 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80018fa:	2064      	movs	r0, #100	; 0x64
 80018fc:	f000 f935 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f932 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001906:	2012      	movs	r0, #18
 8001908:	f000 f92f 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 800190c:	2081      	movs	r0, #129	; 0x81
 800190e:	f000 f92c 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001912:	20e8      	movs	r0, #232	; 0xe8
 8001914:	f000 f91c 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001918:	2085      	movs	r0, #133	; 0x85
 800191a:	f000 f926 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800191e:	2000      	movs	r0, #0
 8001920:	f000 f923 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001924:	2078      	movs	r0, #120	; 0x78
 8001926:	f000 f920 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 800192a:	20cb      	movs	r0, #203	; 0xcb
 800192c:	f000 f910 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001930:	2039      	movs	r0, #57	; 0x39
 8001932:	f000 f91a 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001936:	202c      	movs	r0, #44	; 0x2c
 8001938:	f000 f917 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800193c:	2000      	movs	r0, #0
 800193e:	f000 f914 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001942:	2034      	movs	r0, #52	; 0x34
 8001944:	f000 f911 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001948:	2002      	movs	r0, #2
 800194a:	f000 f90e 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800194e:	20f7      	movs	r0, #247	; 0xf7
 8001950:	f000 f8fe 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001954:	2020      	movs	r0, #32
 8001956:	f000 f908 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800195a:	20ea      	movs	r0, #234	; 0xea
 800195c:	f000 f8f8 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001960:	2000      	movs	r0, #0
 8001962:	f000 f902 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001966:	2000      	movs	r0, #0
 8001968:	f000 f8ff 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800196c:	20b1      	movs	r0, #177	; 0xb1
 800196e:	f000 f8ef 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f8f9 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001978:	201b      	movs	r0, #27
 800197a:	f000 f8f6 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800197e:	20b6      	movs	r0, #182	; 0xb6
 8001980:	f000 f8e6 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001984:	200a      	movs	r0, #10
 8001986:	f000 f8f0 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800198a:	20a2      	movs	r0, #162	; 0xa2
 800198c:	f000 f8ed 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001990:	20c0      	movs	r0, #192	; 0xc0
 8001992:	f000 f8dd 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001996:	2010      	movs	r0, #16
 8001998:	f000 f8e7 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800199c:	20c1      	movs	r0, #193	; 0xc1
 800199e:	f000 f8d7 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80019a2:	2010      	movs	r0, #16
 80019a4:	f000 f8e1 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80019a8:	20c5      	movs	r0, #197	; 0xc5
 80019aa:	f000 f8d1 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80019ae:	2045      	movs	r0, #69	; 0x45
 80019b0:	f000 f8db 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80019b4:	2015      	movs	r0, #21
 80019b6:	f000 f8d8 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80019ba:	20c7      	movs	r0, #199	; 0xc7
 80019bc:	f000 f8c8 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80019c0:	2090      	movs	r0, #144	; 0x90
 80019c2:	f000 f8d2 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80019c6:	2036      	movs	r0, #54	; 0x36
 80019c8:	f000 f8c2 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80019cc:	20c8      	movs	r0, #200	; 0xc8
 80019ce:	f000 f8cc 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80019d2:	20f2      	movs	r0, #242	; 0xf2
 80019d4:	f000 f8bc 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80019d8:	2000      	movs	r0, #0
 80019da:	f000 f8c6 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80019de:	20b0      	movs	r0, #176	; 0xb0
 80019e0:	f000 f8b6 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80019e4:	20c2      	movs	r0, #194	; 0xc2
 80019e6:	f000 f8c0 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80019ea:	20b6      	movs	r0, #182	; 0xb6
 80019ec:	f000 f8b0 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80019f0:	200a      	movs	r0, #10
 80019f2:	f000 f8ba 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80019f6:	20a7      	movs	r0, #167	; 0xa7
 80019f8:	f000 f8b7 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80019fc:	2027      	movs	r0, #39	; 0x27
 80019fe:	f000 f8b4 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001a02:	2004      	movs	r0, #4
 8001a04:	f000 f8b1 	bl	8001b6a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001a08:	202a      	movs	r0, #42	; 0x2a
 8001a0a:	f000 f8a1 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 f8ab 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f000 f8a8 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 f8a5 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001a20:	20ef      	movs	r0, #239	; 0xef
 8001a22:	f000 f8a2 	bl	8001b6a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001a26:	202b      	movs	r0, #43	; 0x2b
 8001a28:	f000 f892 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f000 f89c 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 f899 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f000 f896 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001a3e:	203f      	movs	r0, #63	; 0x3f
 8001a40:	f000 f893 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001a44:	20f6      	movs	r0, #246	; 0xf6
 8001a46:	f000 f883 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 f88d 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f000 f88a 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001a56:	2006      	movs	r0, #6
 8001a58:	f000 f887 	bl	8001b6a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001a5c:	202c      	movs	r0, #44	; 0x2c
 8001a5e:	f000 f877 	bl	8001b50 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001a62:	20c8      	movs	r0, #200	; 0xc8
 8001a64:	f000 f9e8 	bl	8001e38 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001a68:	2026      	movs	r0, #38	; 0x26
 8001a6a:	f000 f871 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f000 f87b 	bl	8001b6a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001a74:	20e0      	movs	r0, #224	; 0xe0
 8001a76:	f000 f86b 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001a7a:	200f      	movs	r0, #15
 8001a7c:	f000 f875 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001a80:	2029      	movs	r0, #41	; 0x29
 8001a82:	f000 f872 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001a86:	2024      	movs	r0, #36	; 0x24
 8001a88:	f000 f86f 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001a8c:	200c      	movs	r0, #12
 8001a8e:	f000 f86c 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001a92:	200e      	movs	r0, #14
 8001a94:	f000 f869 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001a98:	2009      	movs	r0, #9
 8001a9a:	f000 f866 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001a9e:	204e      	movs	r0, #78	; 0x4e
 8001aa0:	f000 f863 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001aa4:	2078      	movs	r0, #120	; 0x78
 8001aa6:	f000 f860 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001aaa:	203c      	movs	r0, #60	; 0x3c
 8001aac:	f000 f85d 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001ab0:	2009      	movs	r0, #9
 8001ab2:	f000 f85a 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001ab6:	2013      	movs	r0, #19
 8001ab8:	f000 f857 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001abc:	2005      	movs	r0, #5
 8001abe:	f000 f854 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001ac2:	2017      	movs	r0, #23
 8001ac4:	f000 f851 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001ac8:	2011      	movs	r0, #17
 8001aca:	f000 f84e 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f84b 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001ad4:	20e1      	movs	r0, #225	; 0xe1
 8001ad6:	f000 f83b 	bl	8001b50 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f845 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001ae0:	2016      	movs	r0, #22
 8001ae2:	f000 f842 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001ae6:	201b      	movs	r0, #27
 8001ae8:	f000 f83f 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001aec:	2004      	movs	r0, #4
 8001aee:	f000 f83c 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001af2:	2011      	movs	r0, #17
 8001af4:	f000 f839 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001af8:	2007      	movs	r0, #7
 8001afa:	f000 f836 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001afe:	2031      	movs	r0, #49	; 0x31
 8001b00:	f000 f833 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001b04:	2033      	movs	r0, #51	; 0x33
 8001b06:	f000 f830 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001b0a:	2042      	movs	r0, #66	; 0x42
 8001b0c:	f000 f82d 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001b10:	2005      	movs	r0, #5
 8001b12:	f000 f82a 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001b16:	200c      	movs	r0, #12
 8001b18:	f000 f827 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f000 f824 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001b22:	2028      	movs	r0, #40	; 0x28
 8001b24:	f000 f821 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001b28:	202f      	movs	r0, #47	; 0x2f
 8001b2a:	f000 f81e 	bl	8001b6a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001b2e:	200f      	movs	r0, #15
 8001b30:	f000 f81b 	bl	8001b6a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001b34:	2011      	movs	r0, #17
 8001b36:	f000 f80b 	bl	8001b50 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001b3a:	20c8      	movs	r0, #200	; 0xc8
 8001b3c:	f000 f97c 	bl	8001e38 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001b40:	2029      	movs	r0, #41	; 0x29
 8001b42:	f000 f805 	bl	8001b50 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001b46:	202c      	movs	r0, #44	; 0x2c
 8001b48:	f000 f802 	bl	8001b50 <ili9341_Write_Reg>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f949 	bl	8001df4 <LCD_IO_WriteReg>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f91a 	bl	8001db0 <LCD_IO_WriteData>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001b88:	4819      	ldr	r0, [pc, #100]	; (8001bf0 <SPI_Init+0x6c>)
 8001b8a:	f002 ff68 	bl	8004a5e <HAL_SPI_GetState>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d12b      	bne.n	8001bec <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <SPI_Init+0x6c>)
 8001b96:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <SPI_Init+0x70>)
 8001b98:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <SPI_Init+0x6c>)
 8001b9c:	2218      	movs	r2, #24
 8001b9e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <SPI_Init+0x6c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <SPI_Init+0x6c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <SPI_Init+0x6c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <SPI_Init+0x6c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <SPI_Init+0x6c>)
 8001bba:	2207      	movs	r2, #7
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <SPI_Init+0x6c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <SPI_Init+0x6c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <SPI_Init+0x6c>)
 8001bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <SPI_Init+0x6c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <SPI_Init+0x6c>)
 8001bda:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bde:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001be0:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <SPI_Init+0x6c>)
 8001be2:	f000 f833 	bl	8001c4c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001be6:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <SPI_Init+0x6c>)
 8001be8:	f002 fbaa 	bl	8004340 <HAL_SPI_Init>
  }
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200001dc 	.word	0x200001dc
 8001bf4:	40015000 	.word	0x40015000

08001bf8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <SPI_Write+0x34>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1db9      	adds	r1, r7, #6
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4808      	ldr	r0, [pc, #32]	; (8001c30 <SPI_Write+0x38>)
 8001c10:	f002 fc47 	bl	80044a2 <HAL_SPI_Transmit>
 8001c14:	4603      	mov	r3, r0
 8001c16:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001c1e:	f000 f809 	bl	8001c34 <SPI_Error>
  }
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	200001dc 	.word	0x200001dc

08001c34 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <SPI_Error+0x14>)
 8001c3a:	f002 fc0a 	bl	8004452 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001c3e:	f7ff ffa1 	bl	8001b84 <SPI_Init>
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200001dc 	.word	0x200001dc

08001c4c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <SPI_MspInit+0x6c>)
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5c:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <SPI_MspInit+0x6c>)
 8001c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c62:	6453      	str	r3, [r2, #68]	; 0x44
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <SPI_MspInit+0x6c>)
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <SPI_MspInit+0x6c>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <SPI_MspInit+0x6c>)
 8001c7a:	f043 0320 	orr.w	r3, r3, #32
 8001c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <SPI_MspInit+0x6c>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001c8c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <SPI_MspInit+0x70>)
 8001caa:	f000 ff15 	bl	8002ad8 <HAL_GPIO_Init>
}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	; 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40021400 	.word	0x40021400

08001cc0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001cc6:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <LCD_IO_Init+0xe0>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d164      	bne.n	8001d98 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001cce:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <LCD_IO_Init+0xe0>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <LCD_IO_Init+0xe4>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	4a31      	ldr	r2, [pc, #196]	; (8001da4 <LCD_IO_Init+0xe4>)
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <LCD_IO_Init+0xe4>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	4619      	mov	r1, r3
 8001d08:	4827      	ldr	r0, [pc, #156]	; (8001da8 <LCD_IO_Init+0xe8>)
 8001d0a:	f000 fee5 	bl	8002ad8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <LCD_IO_Init+0xe4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a23      	ldr	r2, [pc, #140]	; (8001da4 <LCD_IO_Init+0xe4>)
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <LCD_IO_Init+0xe4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	4619      	mov	r1, r3
 8001d42:	4819      	ldr	r0, [pc, #100]	; (8001da8 <LCD_IO_Init+0xe8>)
 8001d44:	f000 fec8 	bl	8002ad8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <LCD_IO_Init+0xe4>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <LCD_IO_Init+0xe4>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <LCD_IO_Init+0xe4>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001d64:	2304      	movs	r3, #4
 8001d66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d70:	2302      	movs	r3, #2
 8001d72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480c      	ldr	r0, [pc, #48]	; (8001dac <LCD_IO_Init+0xec>)
 8001d7c:	f000 feac 	bl	8002ad8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001d80:	2200      	movs	r2, #0
 8001d82:	2104      	movs	r1, #4
 8001d84:	4809      	ldr	r0, [pc, #36]	; (8001dac <LCD_IO_Init+0xec>)
 8001d86:	f001 f977 	bl	8003078 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	4807      	ldr	r0, [pc, #28]	; (8001dac <LCD_IO_Init+0xec>)
 8001d90:	f001 f972 	bl	8003078 <HAL_GPIO_WritePin>

    SPI_Init();
 8001d94:	f7ff fef6 	bl	8001b84 <SPI_Init>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20025a34 	.word	0x20025a34
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40020800 	.word	0x40020800

08001db0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc0:	480a      	ldr	r0, [pc, #40]	; (8001dec <LCD_IO_WriteData+0x3c>)
 8001dc2:	f001 f959 	bl	8003078 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2104      	movs	r1, #4
 8001dca:	4809      	ldr	r0, [pc, #36]	; (8001df0 <LCD_IO_WriteData+0x40>)
 8001dcc:	f001 f954 	bl	8003078 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff10 	bl	8001bf8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2104      	movs	r1, #4
 8001ddc:	4804      	ldr	r0, [pc, #16]	; (8001df0 <LCD_IO_WriteData+0x40>)
 8001dde:	f001 f94b 	bl	8003078 <HAL_GPIO_WritePin>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40020c00 	.word	0x40020c00
 8001df0:	40020800 	.word	0x40020800

08001df4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e04:	480a      	ldr	r0, [pc, #40]	; (8001e30 <LCD_IO_WriteReg+0x3c>)
 8001e06:	f001 f937 	bl	8003078 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2104      	movs	r1, #4
 8001e0e:	4809      	ldr	r0, [pc, #36]	; (8001e34 <LCD_IO_WriteReg+0x40>)
 8001e10:	f001 f932 	bl	8003078 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff feed 	bl	8001bf8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2104      	movs	r1, #4
 8001e22:	4804      	ldr	r0, [pc, #16]	; (8001e34 <LCD_IO_WriteReg+0x40>)
 8001e24:	f001 f928 	bl	8003078 <HAL_GPIO_WritePin>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40020800 	.word	0x40020800

08001e38 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fcb5 	bl	80027b0 <HAL_Delay>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <RNG_init>:
static RNG_HandleTypeDef config_RNG;
HAL_StatusTypeDef status;
uint32_t RNG_1;
uint32_t RNG_2;

void RNG_init(){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
	config_RNG.ErrorCode = 0;
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <RNG_init+0x60>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
	config_RNG.Instance = RNG; // check RNG
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <RNG_init+0x60>)
 8001e5e:	4a15      	ldr	r2, [pc, #84]	; (8001eb4 <RNG_init+0x64>)
 8001e60:	601a      	str	r2, [r3, #0]
	config_RNG.Lock = HAL_UNLOCKED;
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <RNG_init+0x60>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	711a      	strb	r2, [r3, #4]
	config_RNG.RandomNumber = 0;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <RNG_init+0x60>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
	config_RNG.State = HAL_RNG_STATE_RESET;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <RNG_init+0x60>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	715a      	strb	r2, [r3, #5]

	__HAL_RCC_RNG_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <RNG_init+0x68>)
 8001e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7c:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <RNG_init+0x68>)
 8001e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e82:	6353      	str	r3, [r2, #52]	; 0x34
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <RNG_init+0x68>)
 8001e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
	status =HAL_RNG_Init(&config_RNG);
 8001e90:	4807      	ldr	r0, [pc, #28]	; (8001eb0 <RNG_init+0x60>)
 8001e92:	f002 f9d5 	bl	8004240 <HAL_RNG_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <RNG_init+0x6c>)
 8001e9c:	701a      	strb	r2, [r3, #0]

	if(status != HAL_OK){
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <RNG_init+0x6c>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d000      	beq.n	8001ea8 <RNG_init+0x58>
		for(;;);
 8001ea6:	e7fe      	b.n	8001ea6 <RNG_init+0x56>
	}
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20025a38 	.word	0x20025a38
 8001eb4:	50060800 	.word	0x50060800
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	20025a48 	.word	0x20025a48

08001ec0 <getRNG>:

uint32_t getRNG(){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	status = HAL_RNG_GenerateRandomNumber(&config_RNG,&RNG_1);
 8001ec4:	490e      	ldr	r1, [pc, #56]	; (8001f00 <getRNG+0x40>)
 8001ec6:	480f      	ldr	r0, [pc, #60]	; (8001f04 <getRNG+0x44>)
 8001ec8:	f002 f9e4 	bl	8004294 <HAL_RNG_GenerateRandomNumber>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <getRNG+0x48>)
 8001ed2:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK){
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <getRNG+0x48>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d000      	beq.n	8001ede <getRNG+0x1e>
		for(;;);
 8001edc:	e7fe      	b.n	8001edc <getRNG+0x1c>
	}
	RNG_2 = RNG_1 % 160;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <getRNG+0x40>)
 8001ee0:	6819      	ldr	r1, [r3, #0]
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <getRNG+0x4c>)
 8001ee4:	fba3 2301 	umull	r2, r3, r3, r1
 8001ee8:	09da      	lsrs	r2, r3, #7
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	015b      	lsls	r3, r3, #5
 8001ef2:	1aca      	subs	r2, r1, r3
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <getRNG+0x50>)
 8001ef6:	601a      	str	r2, [r3, #0]
	if(RNG_2 < 0){
		RNG_2 = RNG_2 *(-1);
	}
	return RNG_2;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <getRNG+0x50>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20025a4c 	.word	0x20025a4c
 8001f04:	20025a38 	.word	0x20025a38
 8001f08:	20025a48 	.word	0x20025a48
 8001f0c:	cccccccd 	.word	0xcccccccd
 8001f10:	20025a50 	.word	0x20025a50

08001f14 <addSchedulerEvent>:

#include <Scheduler.h>

static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t addEvents){
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	scheduledEvents |= addEvents;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <addSchedulerEvent+0x20>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <addSchedulerEvent+0x20>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	20025a54 	.word	0x20025a54

08001f38 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t removeEvents){
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~(removeEvents);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	43da      	mvns	r2, r3
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <removeSchedulerEvent+0x24>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <removeSchedulerEvent+0x24>)
 8001f4c:	6013      	str	r3, [r2, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20025a54 	.word	0x20025a54

08001f60 <getScheduledEvents>:

uint32_t getScheduledEvents(){
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <getScheduledEvents+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20025a54 	.word	0x20025a54

08001f78 <main>:
  * @brief  The application entry point.
  * @retval int
  */
float oldValue = 160;
int main(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f7e:	f000 fba5 	bl	80026cc <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project

  systemClockOverride();
 8001f82:	f000 f8e9 	bl	8002158 <systemClockOverride>


  ApplicationInit();
 8001f86:	f7fe fe37 	bl	8000bf8 <ApplicationInit>
  RNG_init();
 8001f8a:	f7ff ff61 	bl	8001e50 <RNG_init>
  uint32_t rng = getRNG();
 8001f8e:	f7ff ff97 	bl	8001ec0 <getRNG>
 8001f92:	6278      	str	r0, [r7, #36]	; 0x24
  //app_Gyro_power();
  HAL_Delay(100);
 8001f94:	2064      	movs	r0, #100	; 0x64
 8001f96:	f000 fc0b 	bl	80027b0 <HAL_Delay>
  app_Gyro_configure_regs();
 8001f9a:	f7fe fe92 	bl	8000cc2 <app_Gyro_configure_regs>



  uint32_t eventsToRun;
  addSchedulerEvent(START_GAME);
 8001f9e:	2040      	movs	r0, #64	; 0x40
 8001fa0:	f7ff ffb8 	bl	8001f14 <addSchedulerEvent>
  bool endGame = false;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  char timeDisplay[9];
  uint32_t currentTime = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]

  oldValue = rng + 80;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	3350      	adds	r3, #80	; 0x50
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fba:	4b62      	ldr	r3, [pc, #392]	; (8002144 <main+0x1cc>)
 8001fbc:	edc3 7a00 	vstr	s15, [r3]

  startScreen();
 8001fc0:	f7ff fba6 	bl	8001710 <startScreen>
  while (1){
  	eventsToRun = getScheduledEvents();
 8001fc4:	f7ff ffcc 	bl	8001f60 <getScheduledEvents>
 8001fc8:	61b8      	str	r0, [r7, #24]

  	if(BEGIN_SCREEN & eventsToRun){
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <main+0x72>
  		removeSchedulerEvent(BEGIN_SCREEN);
 8001fd4:	2080      	movs	r0, #128	; 0x80
 8001fd6:	f7ff ffaf 	bl	8001f38 <removeSchedulerEvent>
  		startScreen();
 8001fda:	f7ff fb99 	bl	8001710 <startScreen>
  		currentTime = HAL_GetTick();
 8001fde:	f000 fbdb 	bl	8002798 <HAL_GetTick>
 8001fe2:	61f8      	str	r0, [r7, #28]
  		addSchedulerEvent(START_GAME);
 8001fe4:	2040      	movs	r0, #64	; 0x40
 8001fe6:	f7ff ff95 	bl	8001f14 <addSchedulerEvent>
  	}

  	if(START_GAME & eventsToRun){
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d018      	beq.n	8002026 <main+0xae>
  		endGame = false;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  		oldValue = oldValue + app_Gyro_getx();
 8001ffa:	f7fe fe68 	bl	8000cce <app_Gyro_getx>
 8001ffe:	eeb0 7a40 	vmov.f32	s14, s0
 8002002:	4b50      	ldr	r3, [pc, #320]	; (8002144 <main+0x1cc>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200c:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <main+0x1cc>)
 800200e:	edc3 7a00 	vstr	s15, [r3]
  		Display_Ball(oldValue);
 8002012:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <main+0x1cc>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	eeb0 0a67 	vmov.f32	s0, s15
 800201c:	f7ff fb5d 	bl	80016da <Display_Ball>
  		HAL_Delay(1);
 8002020:	2001      	movs	r0, #1
 8002022:	f000 fbc5 	bl	80027b0 <HAL_Delay>
  	}

  	if(EVENTFLAG_REBOOT_CMD & eventsToRun){
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b00      	cmp	r3, #0
 800202e:	d017      	beq.n	8002060 <main+0xe8>
  		endGame = true;
 8002030:	2301      	movs	r3, #1
 8002032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  		addSchedulerEvent(BEGIN_SCREEN);
 8002036:	2080      	movs	r0, #128	; 0x80
 8002038:	f7ff ff6c 	bl	8001f14 <addSchedulerEvent>
  		HAL_Delay(2000);
 800203c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002040:	f000 fbb6 	bl	80027b0 <HAL_Delay>
  		removeSchedulerEvent(EVENTFLAG_REBOOT_CMD);
 8002044:	2020      	movs	r0, #32
 8002046:	f7ff ff77 	bl	8001f38 <removeSchedulerEvent>
  		oldValue = rng + 80;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	3350      	adds	r3, #80	; 0x50
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <main+0x1cc>)
 8002058:	edc3 7a00 	vstr	s15, [r3]
  		currentTime = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
  	}

  	if((oldValue > 281 && endGame == false) || (oldValue < 30 && endGame == false)){
 8002060:	4b38      	ldr	r3, [pc, #224]	; (8002144 <main+0x1cc>)
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002148 <main+0x1d0>
 800206a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800206e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002072:	dd06      	ble.n	8002082 <main+0x10a>
 8002074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d110      	bne.n	80020a4 <main+0x12c>
 8002082:	4b30      	ldr	r3, [pc, #192]	; (8002144 <main+0x1cc>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800208c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	d554      	bpl.n	8002140 <main+0x1c8>
 8002096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800209a:	f083 0301 	eor.w	r3, r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d08f      	beq.n	8001fc4 <main+0x4c>
  		gameOver();
 80020a4:	f7ff fbcc 	bl	8001840 <gameOver>
  		HAL_Delay(3000);
 80020a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020ac:	f000 fb80 	bl	80027b0 <HAL_Delay>
  		uint32_t endTime = HAL_GetTick();
 80020b0:	f000 fb72 	bl	8002798 <HAL_GetTick>
 80020b4:	6178      	str	r0, [r7, #20]
  		int FinalTime = endTime - currentTime;
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	613b      	str	r3, [r7, #16]
  		FinalTime = FinalTime / 1000;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4a22      	ldr	r2, [pc, #136]	; (800214c <main+0x1d4>)
 80020c2:	fb82 1203 	smull	r1, r2, r2, r3
 80020c6:	1192      	asrs	r2, r2, #6
 80020c8:	17db      	asrs	r3, r3, #31
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	613b      	str	r3, [r7, #16]

  		sprintf(timeDisplay, "%d",FinalTime);
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	491f      	ldr	r1, [pc, #124]	; (8002150 <main+0x1d8>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f002 fd9b 	bl	8004c10 <siprintf>
  		LCD_Clear(0,LCD_COLOR_WHITE);
 80020da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff fad6 	bl	8001690 <LCD_Clear>
  		LCD_SetTextColor(LCD_COLOR_BLACK);
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff fa5f 	bl	80015a8 <LCD_SetTextColor>
  		LCD_SetFont(&Font16x24);
 80020ea:	481a      	ldr	r0, [pc, #104]	; (8002154 <main+0x1dc>)
 80020ec:	f7ff fa6c 	bl	80015c8 <LCD_SetFont>

  		LCD_DisplayChar(80,140,'T');
 80020f0:	2254      	movs	r2, #84	; 0x54
 80020f2:	218c      	movs	r1, #140	; 0x8c
 80020f4:	2050      	movs	r0, #80	; 0x50
 80020f6:	f7ff fa35 	bl	8001564 <LCD_DisplayChar>
  		LCD_DisplayChar(90,140,'I');
 80020fa:	2249      	movs	r2, #73	; 0x49
 80020fc:	218c      	movs	r1, #140	; 0x8c
 80020fe:	205a      	movs	r0, #90	; 0x5a
 8002100:	f7ff fa30 	bl	8001564 <LCD_DisplayChar>
  		LCD_DisplayChar(100,140,'M');
 8002104:	224d      	movs	r2, #77	; 0x4d
 8002106:	218c      	movs	r1, #140	; 0x8c
 8002108:	2064      	movs	r0, #100	; 0x64
 800210a:	f7ff fa2b 	bl	8001564 <LCD_DisplayChar>
  		LCD_DisplayChar(115,140,'E');
 800210e:	2245      	movs	r2, #69	; 0x45
 8002110:	218c      	movs	r1, #140	; 0x8c
 8002112:	2073      	movs	r0, #115	; 0x73
 8002114:	f7ff fa26 	bl	8001564 <LCD_DisplayChar>
  		LCD_DisplayChar(125,140,':');
 8002118:	223a      	movs	r2, #58	; 0x3a
 800211a:	218c      	movs	r1, #140	; 0x8c
 800211c:	207d      	movs	r0, #125	; 0x7d
 800211e:	f7ff fa21 	bl	8001564 <LCD_DisplayChar>
  		LCD_DisplayChar(100,165,timeDisplay[0]);
 8002122:	793b      	ldrb	r3, [r7, #4]
 8002124:	461a      	mov	r2, r3
 8002126:	21a5      	movs	r1, #165	; 0xa5
 8002128:	2064      	movs	r0, #100	; 0x64
 800212a:	f7ff fa1b 	bl	8001564 <LCD_DisplayChar>

  		removeSchedulerEvent(START_GAME);
 800212e:	2040      	movs	r0, #64	; 0x40
 8002130:	f7ff ff02 	bl	8001f38 <removeSchedulerEvent>
  		endGame = true;
 8002134:	2301      	movs	r3, #1
 8002136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  		rng = getRNG();
 800213a:	f7ff fec1 	bl	8001ec0 <getRNG>
 800213e:	6278      	str	r0, [r7, #36]	; 0x24
  	eventsToRun = getScheduledEvents();
 8002140:	e740      	b.n	8001fc4 <main+0x4c>
 8002142:	bf00      	nop
 8002144:	20000010 	.word	0x20000010
 8002148:	438c8000 	.word	0x438c8000
 800214c:	10624dd3 	.word	0x10624dd3
 8002150:	08005570 	.word	0x08005570
 8002154:	20000008 	.word	0x20000008

08002158 <systemClockOverride>:
    Error_Handler();
  }
}

void systemClockOverride(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b092      	sub	sp, #72	; 0x48
 800215c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <systemClockOverride+0x7c>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <systemClockOverride+0x7c>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <systemClockOverride+0x7c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800217a:	2301      	movs	r3, #1
 800217c:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800217e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002182:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002184:	2302      	movs	r3, #2
 8002186:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002188:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800218c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800218e:	2308      	movs	r3, #8
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002192:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002198:	2302      	movs	r3, #2
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800219c:	2307      	movs	r3, #7
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 fa28 	bl	80035f8 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80021a8:	230f      	movs	r3, #15
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ac:	2302      	movs	r3, #2
 80021ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021be:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80021c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021c4:	2105      	movs	r1, #5
 80021c6:	4618      	mov	r0, r3
 80021c8:	f001 fc8e 	bl	8003ae8 <HAL_RCC_ClockConfig>
}
 80021cc:	bf00      	nop
 80021ce:	3748      	adds	r7, #72	; 0x48
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40023800 	.word	0x40023800

080021d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
}
 80021de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <Error_Handler+0x8>
	...

080021e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_MspInit+0x4c>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <HAL_MspInit+0x4c>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_MspInit+0x4c>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_MspInit+0x4c>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a08      	ldr	r2, [pc, #32]	; (8002230 <HAL_MspInit+0x4c>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_MspInit+0x4c>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002222:	2007      	movs	r0, #7
 8002224:	f000 fbfa 	bl	8002a1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800

08002234 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b09a      	sub	sp, #104	; 0x68
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800224c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002250:	2230      	movs	r2, #48	; 0x30
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f002 fcfb 	bl	8004c50 <memset>
  if(hltdc->Instance==LTDC)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a81      	ldr	r2, [pc, #516]	; (8002464 <HAL_LTDC_MspInit+0x230>)
 8002260:	4293      	cmp	r3, r2
 8002262:	f040 80fa 	bne.w	800245a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002266:	2308      	movs	r3, #8
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800226a:	2332      	movs	r3, #50	; 0x32
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800226e:	2302      	movs	r3, #2
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002272:	2300      	movs	r3, #0
 8002274:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227a:	4618      	mov	r0, r3
 800227c:	f001 fe20 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002286:	f7ff ffa7 	bl	80021d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
 800228e:	4b76      	ldr	r3, [pc, #472]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4a75      	ldr	r2, [pc, #468]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 8002294:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b73      	ldr	r3, [pc, #460]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022a2:	623b      	str	r3, [r7, #32]
 80022a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	4b6f      	ldr	r3, [pc, #444]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a6e      	ldr	r2, [pc, #440]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 80022b0:	f043 0320 	orr.w	r3, r3, #32
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b6c      	ldr	r3, [pc, #432]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	4b68      	ldr	r3, [pc, #416]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a67      	ldr	r2, [pc, #412]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b65      	ldr	r3, [pc, #404]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	4b61      	ldr	r3, [pc, #388]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a60      	ldr	r2, [pc, #384]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b5e      	ldr	r3, [pc, #376]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	4b5a      	ldr	r3, [pc, #360]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a59      	ldr	r2, [pc, #356]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 8002304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b57      	ldr	r3, [pc, #348]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a52      	ldr	r2, [pc, #328]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b50      	ldr	r3, [pc, #320]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	4b4c      	ldr	r3, [pc, #304]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a4b      	ldr	r2, [pc, #300]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 800233c:	f043 0308 	orr.w	r3, r3, #8
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b49      	ldr	r3, [pc, #292]	; (8002468 <HAL_LTDC_MspInit+0x234>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800234e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002352:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002360:	230e      	movs	r3, #14
 8002362:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002364:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002368:	4619      	mov	r1, r3
 800236a:	4840      	ldr	r0, [pc, #256]	; (800246c <HAL_LTDC_MspInit+0x238>)
 800236c:	f000 fbb4 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002370:	f641 0358 	movw	r3, #6232	; 0x1858
 8002374:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002382:	230e      	movs	r3, #14
 8002384:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800238a:	4619      	mov	r1, r3
 800238c:	4838      	ldr	r0, [pc, #224]	; (8002470 <HAL_LTDC_MspInit+0x23c>)
 800238e:	f000 fba3 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002392:	2303      	movs	r3, #3
 8002394:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80023a2:	2309      	movs	r3, #9
 80023a4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023aa:	4619      	mov	r1, r3
 80023ac:	4831      	ldr	r0, [pc, #196]	; (8002474 <HAL_LTDC_MspInit+0x240>)
 80023ae:	f000 fb93 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80023b2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80023b6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023c4:	230e      	movs	r3, #14
 80023c6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023cc:	4619      	mov	r1, r3
 80023ce:	4829      	ldr	r0, [pc, #164]	; (8002474 <HAL_LTDC_MspInit+0x240>)
 80023d0:	f000 fb82 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80023d4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80023d8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023e6:	230e      	movs	r3, #14
 80023e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023ee:	4619      	mov	r1, r3
 80023f0:	4821      	ldr	r0, [pc, #132]	; (8002478 <HAL_LTDC_MspInit+0x244>)
 80023f2:	f000 fb71 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80023f6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80023fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002408:	230e      	movs	r3, #14
 800240a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002410:	4619      	mov	r1, r3
 8002412:	481a      	ldr	r0, [pc, #104]	; (800247c <HAL_LTDC_MspInit+0x248>)
 8002414:	f000 fb60 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002418:	2348      	movs	r3, #72	; 0x48
 800241a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002428:	230e      	movs	r3, #14
 800242a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800242c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002430:	4619      	mov	r1, r3
 8002432:	4813      	ldr	r0, [pc, #76]	; (8002480 <HAL_LTDC_MspInit+0x24c>)
 8002434:	f000 fb50 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002438:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800243c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800244a:	2309      	movs	r3, #9
 800244c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800244e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002452:	4619      	mov	r1, r3
 8002454:	4808      	ldr	r0, [pc, #32]	; (8002478 <HAL_LTDC_MspInit+0x244>)
 8002456:	f000 fb3f 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800245a:	bf00      	nop
 800245c:	3768      	adds	r7, #104	; 0x68
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40016800 	.word	0x40016800
 8002468:	40023800 	.word	0x40023800
 800246c:	40021400 	.word	0x40021400
 8002470:	40020000 	.word	0x40020000
 8002474:	40020400 	.word	0x40020400
 8002478:	40021800 	.word	0x40021800
 800247c:	40020800 	.word	0x40020800
 8002480:	40020c00 	.word	0x40020c00

08002484 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <HAL_RNG_MspInit+0x3c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d10d      	bne.n	80024b2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_RNG_MspInit+0x40>)
 800249c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <HAL_RNG_MspInit+0x40>)
 80024a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024a4:	6353      	str	r3, [r2, #52]	; 0x34
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <HAL_RNG_MspInit+0x40>)
 80024a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	50060800 	.word	0x50060800
 80024c4:	40023800 	.word	0x40023800

080024c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <HAL_SPI_MspInit+0x84>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d12c      	bne.n	8002544 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_SPI_MspInit+0x88>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_SPI_MspInit+0x88>)
 80024f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_SPI_MspInit+0x88>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_SPI_MspInit+0x88>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <HAL_SPI_MspInit+0x88>)
 8002510:	f043 0320 	orr.w	r3, r3, #32
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_SPI_MspInit+0x88>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002522:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002530:	2300      	movs	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002534:	2305      	movs	r3, #5
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <HAL_SPI_MspInit+0x8c>)
 8002540:	f000 faca 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002544:	bf00      	nop
 8002546:	3728      	adds	r7, #40	; 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40015000 	.word	0x40015000
 8002550:	40023800 	.word	0x40023800
 8002554:	40021400 	.word	0x40021400

08002558 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a08      	ldr	r2, [pc, #32]	; (8002588 <HAL_SPI_MspDeInit+0x30>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10a      	bne.n	8002580 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_SPI_MspDeInit+0x34>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	4a07      	ldr	r2, [pc, #28]	; (800258c <HAL_SPI_MspDeInit+0x34>)
 8002570:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002574:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002576:	f44f 7160 	mov.w	r1, #896	; 0x380
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <HAL_SPI_MspDeInit+0x38>)
 800257c:	f000 fc58 	bl	8002e30 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40015000 	.word	0x40015000
 800258c:	40023800 	.word	0x40023800
 8002590:	40021400 	.word	0x40021400

08002594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <NMI_Handler+0x4>

0800259a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800259e:	e7fe      	b.n	800259e <HardFault_Handler+0x4>

080025a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <MemManage_Handler+0x4>

080025a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025aa:	e7fe      	b.n	80025aa <BusFault_Handler+0x4>

080025ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <UsageFault_Handler+0x4>

080025b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e0:	f000 f8c6 	bl	8002770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <_sbrk+0x5c>)
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <_sbrk+0x60>)
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <_sbrk+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <_sbrk+0x64>)
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <_sbrk+0x68>)
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	429a      	cmp	r2, r3
 8002616:	d207      	bcs.n	8002628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002618:	f002 fb22 	bl	8004c60 <__errno>
 800261c:	4603      	mov	r3, r0
 800261e:	220c      	movs	r2, #12
 8002620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002626:	e009      	b.n	800263c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <_sbrk+0x64>)
 8002638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20030000 	.word	0x20030000
 8002648:	00000400 	.word	0x00000400
 800264c:	20025a58 	.word	0x20025a58
 8002650:	20025ba8 	.word	0x20025ba8

08002654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <SystemInit+0x20>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <SystemInit+0x20>)
 8002660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800267c:	480d      	ldr	r0, [pc, #52]	; (80026b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800267e:	490e      	ldr	r1, [pc, #56]	; (80026b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002680:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002684:	e002      	b.n	800268c <LoopCopyDataInit>

08002686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268a:	3304      	adds	r3, #4

0800268c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800268c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002690:	d3f9      	bcc.n	8002686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002692:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002694:	4c0b      	ldr	r4, [pc, #44]	; (80026c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002698:	e001      	b.n	800269e <LoopFillZerobss>

0800269a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800269c:	3204      	adds	r2, #4

0800269e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a0:	d3fb      	bcc.n	800269a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026a2:	f7ff ffd7 	bl	8002654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026a6:	f002 fae1 	bl	8004c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026aa:	f7ff fc65 	bl	8001f78 <main>
  bx  lr    
 80026ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80026b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80026b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80026bc:	08006798 	.word	0x08006798
  ldr r2, =_sbss
 80026c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80026c4:	20025ba8 	.word	0x20025ba8

080026c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC_IRQHandler>
	...

080026cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0d      	ldr	r2, [pc, #52]	; (800270c <HAL_Init+0x40>)
 80026d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_Init+0x40>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_Init+0x40>)
 80026e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_Init+0x40>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a07      	ldr	r2, [pc, #28]	; (800270c <HAL_Init+0x40>)
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f4:	2003      	movs	r0, #3
 80026f6:	f000 f991 	bl	8002a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f000 f808 	bl	8002710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002700:	f7ff fd70 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023c00 	.word	0x40023c00

08002710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_InitTick+0x54>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_InitTick+0x58>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	fbb3 f3f1 	udiv	r3, r3, r1
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f9b7 	bl	8002aa2 <HAL_SYSTICK_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e00e      	b.n	800275c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0f      	cmp	r3, #15
 8002742:	d80a      	bhi.n	800275a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002744:	2200      	movs	r2, #0
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800274c:	f000 f971 	bl	8002a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <HAL_InitTick+0x5c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000014 	.word	0x20000014
 8002768:	2000001c 	.word	0x2000001c
 800276c:	20000018 	.word	0x20000018

08002770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x20>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x24>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4413      	add	r3, r2
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_IncTick+0x24>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	2000001c 	.word	0x2000001c
 8002794:	20025a5c 	.word	0x20025a5c

08002798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return uwTick;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_GetTick+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20025a5c 	.word	0x20025a5c

080027b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff ffee 	bl	8002798 <HAL_GetTick>
 80027bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c8:	d005      	beq.n	80027d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_Delay+0x44>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027d6:	bf00      	nop
 80027d8:	f7ff ffde 	bl	8002798 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d8f7      	bhi.n	80027d8 <HAL_Delay+0x28>
  {
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	2000001c 	.word	0x2000001c

080027f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282a:	4a04      	ldr	r2, [pc, #16]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0307 	and.w	r3, r3, #7
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db0b      	blt.n	8002886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	4907      	ldr	r1, [pc, #28]	; (8002894 <__NVIC_EnableIRQ+0x38>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2001      	movs	r0, #1
 800287e:	fa00 f202 	lsl.w	r2, r0, r2
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db12      	blt.n	80028d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	490a      	ldr	r1, [pc, #40]	; (80028dc <__NVIC_DisableIRQ+0x44>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2001      	movs	r0, #1
 80028ba:	fa00 f202 	lsl.w	r2, r0, r2
 80028be:	3320      	adds	r3, #32
 80028c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028c4:	f3bf 8f4f 	dsb	sy
}
 80028c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028ca:	f3bf 8f6f 	isb	sy
}
 80028ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000e100 	.word	0xe000e100

080028e0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	db0c      	blt.n	800290c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4907      	ldr	r1, [pc, #28]	; (8002918 <__NVIC_ClearPendingIRQ+0x38>)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	2001      	movs	r0, #1
 8002902:	fa00 f202 	lsl.w	r2, r0, r2
 8002906:	3360      	adds	r3, #96	; 0x60
 8002908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000e100 	.word	0xe000e100

0800291c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292c:	2b00      	cmp	r3, #0
 800292e:	db0a      	blt.n	8002946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	490c      	ldr	r1, [pc, #48]	; (8002968 <__NVIC_SetPriority+0x4c>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	0112      	lsls	r2, r2, #4
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	440b      	add	r3, r1
 8002940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002944:	e00a      	b.n	800295c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <__NVIC_SetPriority+0x50>)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	3b04      	subs	r3, #4
 8002954:	0112      	lsls	r2, r2, #4
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	440b      	add	r3, r1
 800295a:	761a      	strb	r2, [r3, #24]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000e100 	.word	0xe000e100
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f1c3 0307 	rsb	r3, r3, #7
 800298a:	2b04      	cmp	r3, #4
 800298c:	bf28      	it	cs
 800298e:	2304      	movcs	r3, #4
 8002990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3304      	adds	r3, #4
 8002996:	2b06      	cmp	r3, #6
 8002998:	d902      	bls.n	80029a0 <NVIC_EncodePriority+0x30>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3b03      	subs	r3, #3
 800299e:	e000      	b.n	80029a2 <NVIC_EncodePriority+0x32>
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	401a      	ands	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	43d9      	mvns	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	4313      	orrs	r3, r2
         );
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e8:	d301      	bcc.n	80029ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ea:	2301      	movs	r3, #1
 80029ec:	e00f      	b.n	8002a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <SysTick_Config+0x40>)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f6:	210f      	movs	r1, #15
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029fc:	f7ff ff8e 	bl	800291c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <SysTick_Config+0x40>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a06:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <SysTick_Config+0x40>)
 8002a08:	2207      	movs	r2, #7
 8002a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	e000e010 	.word	0xe000e010

08002a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff fee7 	bl	80027f8 <__NVIC_SetPriorityGrouping>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a44:	f7ff fefc 	bl	8002840 <__NVIC_GetPriorityGrouping>
 8002a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	6978      	ldr	r0, [r7, #20]
 8002a50:	f7ff ff8e 	bl	8002970 <NVIC_EncodePriority>
 8002a54:	4602      	mov	r2, r0
 8002a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff5d 	bl	800291c <__NVIC_SetPriority>
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff feef 	bl	800285c <__NVIC_EnableIRQ>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff feff 	bl	8002898 <__NVIC_DisableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ff94 	bl	80029d8 <SysTick_Config>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff09 	bl	80028e0 <__NVIC_ClearPendingIRQ>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e177      	b.n	8002de4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8166 	bne.w	8002dde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d017      	beq.n	8002bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d123      	bne.n	8002c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80c0 	beq.w	8002dde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7a:	4a61      	ldr	r2, [pc, #388]	; (8002e00 <HAL_GPIO_Init+0x328>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_GPIO_Init+0x32c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d037      	beq.n	8002d16 <HAL_GPIO_Init+0x23e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a57      	ldr	r2, [pc, #348]	; (8002e08 <HAL_GPIO_Init+0x330>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_GPIO_Init+0x23a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a56      	ldr	r2, [pc, #344]	; (8002e0c <HAL_GPIO_Init+0x334>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d02b      	beq.n	8002d0e <HAL_GPIO_Init+0x236>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a55      	ldr	r2, [pc, #340]	; (8002e10 <HAL_GPIO_Init+0x338>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d025      	beq.n	8002d0a <HAL_GPIO_Init+0x232>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a54      	ldr	r2, [pc, #336]	; (8002e14 <HAL_GPIO_Init+0x33c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x22e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a53      	ldr	r2, [pc, #332]	; (8002e18 <HAL_GPIO_Init+0x340>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x22a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	; (8002e1c <HAL_GPIO_Init+0x344>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x226>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a51      	ldr	r2, [pc, #324]	; (8002e20 <HAL_GPIO_Init+0x348>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x222>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a50      	ldr	r2, [pc, #320]	; (8002e24 <HAL_GPIO_Init+0x34c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x21e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4f      	ldr	r2, [pc, #316]	; (8002e28 <HAL_GPIO_Init+0x350>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x21a>
 8002cee:	2309      	movs	r3, #9
 8002cf0:	e012      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cf2:	230a      	movs	r3, #10
 8002cf4:	e010      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	e00e      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cfa:	2307      	movs	r3, #7
 8002cfc:	e00c      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cfe:	2306      	movs	r3, #6
 8002d00:	e00a      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d02:	2305      	movs	r3, #5
 8002d04:	e008      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d06:	2304      	movs	r3, #4
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e004      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d16:	2300      	movs	r3, #0
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f002 0203 	and.w	r2, r2, #3
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	4093      	lsls	r3, r2
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d28:	4935      	ldr	r1, [pc, #212]	; (8002e00 <HAL_GPIO_Init+0x328>)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a34      	ldr	r2, [pc, #208]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dae:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	f67f ae84 	bls.w	8002af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020c00 	.word	0x40020c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40021400 	.word	0x40021400
 8002e1c:	40021800 	.word	0x40021800
 8002e20:	40021c00 	.word	0x40021c00
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40022400 	.word	0x40022400
 8002e2c:	40013c00 	.word	0x40013c00

08002e30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e0d9      	b.n	8003000 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	f040 80c9 	bne.w	8002ffa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e68:	4a6b      	ldr	r2, [pc, #428]	; (8003018 <HAL_GPIO_DeInit+0x1e8>)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	3302      	adds	r3, #2
 8002e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e74:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	220f      	movs	r2, #15
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	4013      	ands	r3, r2
 8002e88:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a63      	ldr	r2, [pc, #396]	; (800301c <HAL_GPIO_DeInit+0x1ec>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d037      	beq.n	8002f02 <HAL_GPIO_DeInit+0xd2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a62      	ldr	r2, [pc, #392]	; (8003020 <HAL_GPIO_DeInit+0x1f0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d031      	beq.n	8002efe <HAL_GPIO_DeInit+0xce>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a61      	ldr	r2, [pc, #388]	; (8003024 <HAL_GPIO_DeInit+0x1f4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d02b      	beq.n	8002efa <HAL_GPIO_DeInit+0xca>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a60      	ldr	r2, [pc, #384]	; (8003028 <HAL_GPIO_DeInit+0x1f8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d025      	beq.n	8002ef6 <HAL_GPIO_DeInit+0xc6>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a5f      	ldr	r2, [pc, #380]	; (800302c <HAL_GPIO_DeInit+0x1fc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d01f      	beq.n	8002ef2 <HAL_GPIO_DeInit+0xc2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a5e      	ldr	r2, [pc, #376]	; (8003030 <HAL_GPIO_DeInit+0x200>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d019      	beq.n	8002eee <HAL_GPIO_DeInit+0xbe>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a5d      	ldr	r2, [pc, #372]	; (8003034 <HAL_GPIO_DeInit+0x204>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_GPIO_DeInit+0xba>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a5c      	ldr	r2, [pc, #368]	; (8003038 <HAL_GPIO_DeInit+0x208>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_GPIO_DeInit+0xb6>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a5b      	ldr	r2, [pc, #364]	; (800303c <HAL_GPIO_DeInit+0x20c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <HAL_GPIO_DeInit+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a5a      	ldr	r2, [pc, #360]	; (8003040 <HAL_GPIO_DeInit+0x210>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_GPIO_DeInit+0xae>
 8002eda:	2309      	movs	r3, #9
 8002edc:	e012      	b.n	8002f04 <HAL_GPIO_DeInit+0xd4>
 8002ede:	230a      	movs	r3, #10
 8002ee0:	e010      	b.n	8002f04 <HAL_GPIO_DeInit+0xd4>
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	e00e      	b.n	8002f04 <HAL_GPIO_DeInit+0xd4>
 8002ee6:	2307      	movs	r3, #7
 8002ee8:	e00c      	b.n	8002f04 <HAL_GPIO_DeInit+0xd4>
 8002eea:	2306      	movs	r3, #6
 8002eec:	e00a      	b.n	8002f04 <HAL_GPIO_DeInit+0xd4>
 8002eee:	2305      	movs	r3, #5
 8002ef0:	e008      	b.n	8002f04 <HAL_GPIO_DeInit+0xd4>
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	e006      	b.n	8002f04 <HAL_GPIO_DeInit+0xd4>
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e004      	b.n	8002f04 <HAL_GPIO_DeInit+0xd4>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e002      	b.n	8002f04 <HAL_GPIO_DeInit+0xd4>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_GPIO_DeInit+0xd4>
 8002f02:	2300      	movs	r3, #0
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	f002 0203 	and.w	r2, r2, #3
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	4093      	lsls	r3, r2
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d132      	bne.n	8002f7a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002f14:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <HAL_GPIO_DeInit+0x214>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	4949      	ldr	r1, [pc, #292]	; (8003044 <HAL_GPIO_DeInit+0x214>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002f22:	4b48      	ldr	r3, [pc, #288]	; (8003044 <HAL_GPIO_DeInit+0x214>)
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	4946      	ldr	r1, [pc, #280]	; (8003044 <HAL_GPIO_DeInit+0x214>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002f30:	4b44      	ldr	r3, [pc, #272]	; (8003044 <HAL_GPIO_DeInit+0x214>)
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	4942      	ldr	r1, [pc, #264]	; (8003044 <HAL_GPIO_DeInit+0x214>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_GPIO_DeInit+0x214>)
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	493f      	ldr	r1, [pc, #252]	; (8003044 <HAL_GPIO_DeInit+0x214>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	220f      	movs	r2, #15
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002f5c:	4a2e      	ldr	r2, [pc, #184]	; (8003018 <HAL_GPIO_DeInit+0x1e8>)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	482a      	ldr	r0, [pc, #168]	; (8003018 <HAL_GPIO_DeInit+0x1e8>)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	400a      	ands	r2, r1
 8002f74:	3302      	adds	r3, #2
 8002f76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2103      	movs	r1, #3
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	08da      	lsrs	r2, r3, #3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3208      	adds	r2, #8
 8002f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	08d2      	lsrs	r2, r2, #3
 8002fb0:	4019      	ands	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3208      	adds	r2, #8
 8002fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2103      	movs	r1, #3
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	401a      	ands	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	401a      	ands	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	2103      	movs	r1, #3
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	401a      	ands	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	f67f af22 	bls.w	8002e4c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40013800 	.word	0x40013800
 800301c:	40020000 	.word	0x40020000
 8003020:	40020400 	.word	0x40020400
 8003024:	40020800 	.word	0x40020800
 8003028:	40020c00 	.word	0x40020c00
 800302c:	40021000 	.word	0x40021000
 8003030:	40021400 	.word	0x40021400
 8003034:	40021800 	.word	0x40021800
 8003038:	40021c00 	.word	0x40021c00
 800303c:	40022000 	.word	0x40022000
 8003040:	40022400 	.word	0x40022400
 8003044:	40013c00 	.word	0x40013c00

08003048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	887b      	ldrh	r3, [r7, #2]
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
 8003064:	e001      	b.n	800306a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
 8003084:	4613      	mov	r3, r2
 8003086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003088:	787b      	ldrb	r3, [r7, #1]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800308e:	887a      	ldrh	r2, [r7, #2]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003094:	e003      	b.n	800309e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	041a      	lsls	r2, r3, #16
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	619a      	str	r2, [r3, #24]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0bf      	b.n	800323e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff f8ae 	bl	8002234 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80030ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6999      	ldr	r1, [r3, #24]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003104:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6899      	ldr	r1, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_LTDC_Init+0x19c>)
 8003120:	400b      	ands	r3, r1
 8003122:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6899      	ldr	r1, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68d9      	ldr	r1, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <HAL_LTDC_Init+0x19c>)
 800314e:	400b      	ands	r3, r1
 8003150:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68d9      	ldr	r1, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1a      	ldr	r2, [r3, #32]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6919      	ldr	r1, [r3, #16]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b33      	ldr	r3, [pc, #204]	; (8003248 <HAL_LTDC_Init+0x19c>)
 800317c:	400b      	ands	r3, r1
 800317e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	041b      	lsls	r3, r3, #16
 8003186:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6919      	ldr	r1, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6959      	ldr	r1, [r3, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_LTDC_Init+0x19c>)
 80031aa:	400b      	ands	r3, r1
 80031ac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	041b      	lsls	r3, r3, #16
 80031b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6959      	ldr	r1, [r3, #20]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80031dc:	041b      	lsls	r3, r3, #16
 80031de:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0206 	orr.w	r2, r2, #6
 800321a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	f000f800 	.word	0xf000f800

0800324c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800324c:	b5b0      	push	{r4, r5, r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_LTDC_ConfigLayer+0x1a>
 8003262:	2302      	movs	r3, #2
 8003264:	e02c      	b.n	80032c0 <HAL_LTDC_ConfigLayer+0x74>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2202      	movs	r2, #2
 8003272:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2134      	movs	r1, #52	; 0x34
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4614      	mov	r4, r2
 800328a:	461d      	mov	r5, r3
 800328c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800328e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003298:	682b      	ldr	r3, [r5, #0]
 800329a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f811 	bl	80032c8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bdb0      	pop	{r4, r5, r7, pc}

080032c8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	; 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	0c1b      	lsrs	r3, r3, #16
 80032e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e4:	4413      	add	r3, r2
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	01db      	lsls	r3, r3, #7
 80032f4:	4413      	add	r3, r2
 80032f6:	3384      	adds	r3, #132	; 0x84
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	4611      	mov	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	01d2      	lsls	r2, r2, #7
 8003304:	440a      	add	r2, r1
 8003306:	3284      	adds	r2, #132	; 0x84
 8003308:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800330c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	0c1b      	lsrs	r3, r3, #16
 800331a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800331e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003320:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4619      	mov	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	01db      	lsls	r3, r3, #7
 800332c:	440b      	add	r3, r1
 800332e:	3384      	adds	r3, #132	; 0x84
 8003330:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003336:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003346:	4413      	add	r3, r2
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	01db      	lsls	r3, r3, #7
 8003356:	4413      	add	r3, r2
 8003358:	3384      	adds	r3, #132	; 0x84
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	4611      	mov	r1, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	01d2      	lsls	r2, r2, #7
 8003366:	440a      	add	r2, r1
 8003368:	3284      	adds	r2, #132	; 0x84
 800336a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800336e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800337e:	4413      	add	r3, r2
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4619      	mov	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	01db      	lsls	r3, r3, #7
 800338c:	440b      	add	r3, r1
 800338e:	3384      	adds	r3, #132	; 0x84
 8003390:	4619      	mov	r1, r3
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	01db      	lsls	r3, r3, #7
 80033a2:	4413      	add	r3, r2
 80033a4:	3384      	adds	r3, #132	; 0x84
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	4611      	mov	r1, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	01d2      	lsls	r2, r2, #7
 80033b2:	440a      	add	r2, r1
 80033b4:	3284      	adds	r2, #132	; 0x84
 80033b6:	f023 0307 	bic.w	r3, r3, #7
 80033ba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	01db      	lsls	r3, r3, #7
 80033c6:	4413      	add	r3, r2
 80033c8:	3384      	adds	r3, #132	; 0x84
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80033d8:	021b      	lsls	r3, r3, #8
 80033da:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	061b      	lsls	r3, r3, #24
 80033ec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	01db      	lsls	r3, r3, #7
 80033f8:	4413      	add	r3, r2
 80033fa:	3384      	adds	r3, #132	; 0x84
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	01db      	lsls	r3, r3, #7
 8003408:	4413      	add	r3, r2
 800340a:	3384      	adds	r3, #132	; 0x84
 800340c:	461a      	mov	r2, r3
 800340e:	2300      	movs	r3, #0
 8003410:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003418:	461a      	mov	r2, r3
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	431a      	orrs	r2, r3
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4619      	mov	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	01db      	lsls	r3, r3, #7
 800342c:	440b      	add	r3, r1
 800342e:	3384      	adds	r3, #132	; 0x84
 8003430:	4619      	mov	r1, r3
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	01db      	lsls	r3, r3, #7
 8003442:	4413      	add	r3, r2
 8003444:	3384      	adds	r3, #132	; 0x84
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	4611      	mov	r1, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	01d2      	lsls	r2, r2, #7
 8003452:	440a      	add	r2, r1
 8003454:	3284      	adds	r2, #132	; 0x84
 8003456:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800345a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	01db      	lsls	r3, r3, #7
 8003466:	4413      	add	r3, r2
 8003468:	3384      	adds	r3, #132	; 0x84
 800346a:	461a      	mov	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	01db      	lsls	r3, r3, #7
 800347c:	4413      	add	r3, r2
 800347e:	3384      	adds	r3, #132	; 0x84
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	4611      	mov	r1, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	01d2      	lsls	r2, r2, #7
 800348c:	440a      	add	r2, r1
 800348e:	3284      	adds	r2, #132	; 0x84
 8003490:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003494:	f023 0307 	bic.w	r3, r3, #7
 8003498:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	68f9      	ldr	r1, [r7, #12]
 80034a4:	6809      	ldr	r1, [r1, #0]
 80034a6:	4608      	mov	r0, r1
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	01c9      	lsls	r1, r1, #7
 80034ac:	4401      	add	r1, r0
 80034ae:	3184      	adds	r1, #132	; 0x84
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	01db      	lsls	r3, r3, #7
 80034be:	4413      	add	r3, r2
 80034c0:	3384      	adds	r3, #132	; 0x84
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	01db      	lsls	r3, r3, #7
 80034ce:	4413      	add	r3, r2
 80034d0:	3384      	adds	r3, #132	; 0x84
 80034d2:	461a      	mov	r2, r3
 80034d4:	2300      	movs	r3, #0
 80034d6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	01db      	lsls	r3, r3, #7
 80034e2:	4413      	add	r3, r2
 80034e4:	3384      	adds	r3, #132	; 0x84
 80034e6:	461a      	mov	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80034f6:	2304      	movs	r3, #4
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	e01b      	b.n	8003534 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d102      	bne.n	800350a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003504:	2303      	movs	r3, #3
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	e014      	b.n	8003534 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b04      	cmp	r3, #4
 8003510:	d00b      	beq.n	800352a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003516:	2b02      	cmp	r3, #2
 8003518:	d007      	beq.n	800352a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800351e:	2b03      	cmp	r3, #3
 8003520:	d003      	beq.n	800352a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003526:	2b07      	cmp	r3, #7
 8003528:	d102      	bne.n	8003530 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800352a:	2302      	movs	r3, #2
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e001      	b.n	8003534 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003530:	2301      	movs	r3, #1
 8003532:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	01db      	lsls	r3, r3, #7
 800353e:	4413      	add	r3, r2
 8003540:	3384      	adds	r3, #132	; 0x84
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	4611      	mov	r1, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	01d2      	lsls	r2, r2, #7
 800354e:	440a      	add	r2, r1
 8003550:	3284      	adds	r2, #132	; 0x84
 8003552:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003556:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	1acb      	subs	r3, r1, r3
 800356e:	69f9      	ldr	r1, [r7, #28]
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003576:	68f9      	ldr	r1, [r7, #12]
 8003578:	6809      	ldr	r1, [r1, #0]
 800357a:	4608      	mov	r0, r1
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	01c9      	lsls	r1, r1, #7
 8003580:	4401      	add	r1, r0
 8003582:	3184      	adds	r1, #132	; 0x84
 8003584:	4313      	orrs	r3, r2
 8003586:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	01db      	lsls	r3, r3, #7
 8003592:	4413      	add	r3, r2
 8003594:	3384      	adds	r3, #132	; 0x84
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	4611      	mov	r1, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	01d2      	lsls	r2, r2, #7
 80035a2:	440a      	add	r2, r1
 80035a4:	3284      	adds	r2, #132	; 0x84
 80035a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80035aa:	f023 0307 	bic.w	r3, r3, #7
 80035ae:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	01db      	lsls	r3, r3, #7
 80035ba:	4413      	add	r3, r2
 80035bc:	3384      	adds	r3, #132	; 0x84
 80035be:	461a      	mov	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	01db      	lsls	r3, r3, #7
 80035d0:	4413      	add	r3, r2
 80035d2:	3384      	adds	r3, #132	; 0x84
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	4611      	mov	r1, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	01d2      	lsls	r2, r2, #7
 80035e0:	440a      	add	r2, r1
 80035e2:	3284      	adds	r2, #132	; 0x84
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	6013      	str	r3, [r2, #0]
}
 80035ea:	bf00      	nop
 80035ec:	3724      	adds	r7, #36	; 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e267      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d075      	beq.n	8003702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003616:	4b88      	ldr	r3, [pc, #544]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b04      	cmp	r3, #4
 8003620:	d00c      	beq.n	800363c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003622:	4b85      	ldr	r3, [pc, #532]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800362a:	2b08      	cmp	r3, #8
 800362c:	d112      	bne.n	8003654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362e:	4b82      	ldr	r3, [pc, #520]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363a:	d10b      	bne.n	8003654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	4b7e      	ldr	r3, [pc, #504]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d05b      	beq.n	8003700 <HAL_RCC_OscConfig+0x108>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d157      	bne.n	8003700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e242      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d106      	bne.n	800366c <HAL_RCC_OscConfig+0x74>
 800365e:	4b76      	ldr	r3, [pc, #472]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a75      	ldr	r2, [pc, #468]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e01d      	b.n	80036a8 <HAL_RCC_OscConfig+0xb0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x98>
 8003676:	4b70      	ldr	r3, [pc, #448]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6f      	ldr	r2, [pc, #444]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800367c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b6d      	ldr	r3, [pc, #436]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6c      	ldr	r2, [pc, #432]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e00b      	b.n	80036a8 <HAL_RCC_OscConfig+0xb0>
 8003690:	4b69      	ldr	r3, [pc, #420]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a68      	ldr	r2, [pc, #416]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b66      	ldr	r3, [pc, #408]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a65      	ldr	r2, [pc, #404]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80036a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d013      	beq.n	80036d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7ff f872 	bl	8002798 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b8:	f7ff f86e 	bl	8002798 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e207      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b5b      	ldr	r3, [pc, #364]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0xc0>
 80036d6:	e014      	b.n	8003702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7ff f85e 	bl	8002798 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e0:	f7ff f85a 	bl	8002798 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e1f3      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	4b51      	ldr	r3, [pc, #324]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0xe8>
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d063      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370e:	4b4a      	ldr	r3, [pc, #296]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003722:	2b08      	cmp	r3, #8
 8003724:	d11c      	bne.n	8003760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003726:	4b44      	ldr	r3, [pc, #272]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d116      	bne.n	8003760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	4b41      	ldr	r3, [pc, #260]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_RCC_OscConfig+0x152>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d001      	beq.n	800374a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e1c7      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374a:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4937      	ldr	r1, [pc, #220]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	e03a      	b.n	80037d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003768:	4b34      	ldr	r3, [pc, #208]	; (800383c <HAL_RCC_OscConfig+0x244>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7ff f813 	bl	8002798 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003776:	f7ff f80f 	bl	8002798 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1a8      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4925      	ldr	r1, [pc, #148]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
 80037a8:	e015      	b.n	80037d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_OscConfig+0x244>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fe fff2 	bl	8002798 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fe ffee 	bl	8002798 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e187      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d036      	beq.n	8003850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d016      	beq.n	8003818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x248>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7fe ffd2 	bl	8002798 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f8:	f7fe ffce 	bl	8002798 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e167      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800380c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x200>
 8003816:	e01b      	b.n	8003850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_OscConfig+0x248>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381e:	f7fe ffbb 	bl	8002798 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	e00e      	b.n	8003844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003826:	f7fe ffb7 	bl	8002798 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d907      	bls.n	8003844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e150      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
 8003838:	40023800 	.word	0x40023800
 800383c:	42470000 	.word	0x42470000
 8003840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003844:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ea      	bne.n	8003826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8097 	beq.w	800398c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003862:	4b81      	ldr	r3, [pc, #516]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10f      	bne.n	800388e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a7c      	ldr	r2, [pc, #496]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
 800387e:	4b7a      	ldr	r3, [pc, #488]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388e:	4b77      	ldr	r3, [pc, #476]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d118      	bne.n	80038cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389a:	4b74      	ldr	r3, [pc, #464]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a73      	ldr	r2, [pc, #460]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 80038a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a6:	f7fe ff77 	bl	8002798 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ae:	f7fe ff73 	bl	8002798 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e10c      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c0:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d106      	bne.n	80038e2 <HAL_RCC_OscConfig+0x2ea>
 80038d4:	4b64      	ldr	r3, [pc, #400]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	4a63      	ldr	r2, [pc, #396]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6713      	str	r3, [r2, #112]	; 0x70
 80038e0:	e01c      	b.n	800391c <HAL_RCC_OscConfig+0x324>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b05      	cmp	r3, #5
 80038e8:	d10c      	bne.n	8003904 <HAL_RCC_OscConfig+0x30c>
 80038ea:	4b5f      	ldr	r3, [pc, #380]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	4a5e      	ldr	r2, [pc, #376]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038f0:	f043 0304 	orr.w	r3, r3, #4
 80038f4:	6713      	str	r3, [r2, #112]	; 0x70
 80038f6:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a5b      	ldr	r2, [pc, #364]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
 8003902:	e00b      	b.n	800391c <HAL_RCC_OscConfig+0x324>
 8003904:	4b58      	ldr	r3, [pc, #352]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a57      	ldr	r2, [pc, #348]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	4b55      	ldr	r3, [pc, #340]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4a54      	ldr	r2, [pc, #336]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003916:	f023 0304 	bic.w	r3, r3, #4
 800391a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d015      	beq.n	8003950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fe ff38 	bl	8002798 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392a:	e00a      	b.n	8003942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392c:	f7fe ff34 	bl	8002798 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e0cb      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003942:	4b49      	ldr	r3, [pc, #292]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0ee      	beq.n	800392c <HAL_RCC_OscConfig+0x334>
 800394e:	e014      	b.n	800397a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7fe ff22 	bl	8002798 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7fe ff1e 	bl	8002798 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e0b5      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396e:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ee      	bne.n	8003958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800397a:	7dfb      	ldrb	r3, [r7, #23]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d105      	bne.n	800398c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003980:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	4a38      	ldr	r2, [pc, #224]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80a1 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003996:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d05c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d141      	bne.n	8003a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039aa:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7fe fef2 	bl	8002798 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fe feee 	bl	8002798 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e087      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	3b01      	subs	r3, #1
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	061b      	lsls	r3, r3, #24
 80039fa:	491b      	ldr	r1, [pc, #108]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7fe fec7 	bl	8002798 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7fe fec3 	bl	8002798 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e05c      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x416>
 8003a2c:	e054      	b.n	8003ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe feb0 	bl	8002798 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe feac 	bl	8002798 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e045      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x444>
 8003a5a:	e03d      	b.n	8003ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e038      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x4ec>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d028      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d121      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d11a      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d111      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	3b01      	subs	r3, #1
 8003abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0cc      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003afc:	4b68      	ldr	r3, [pc, #416]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d90c      	bls.n	8003b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0b8      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d020      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b3c:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4a58      	ldr	r2, [pc, #352]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b54:	4b53      	ldr	r3, [pc, #332]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4a52      	ldr	r2, [pc, #328]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b60:	4b50      	ldr	r3, [pc, #320]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	494d      	ldr	r1, [pc, #308]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d044      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d119      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e07f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d003      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d107      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba6:	4b3f      	ldr	r3, [pc, #252]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e06f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb6:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e067      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bc6:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f023 0203 	bic.w	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4934      	ldr	r1, [pc, #208]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd8:	f7fe fdde 	bl	8002798 <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be0:	f7fe fdda 	bl	8002798 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e04f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 020c 	and.w	r2, r3, #12
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d1eb      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d20c      	bcs.n	8003c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e032      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4916      	ldr	r1, [pc, #88]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c5a:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	490e      	ldr	r1, [pc, #56]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c6e:	f000 f821 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c72:	4602      	mov	r2, r0
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	490a      	ldr	r1, [pc, #40]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	5ccb      	ldrb	r3, [r1, r3]
 8003c82:	fa22 f303 	lsr.w	r3, r2, r3
 8003c86:	4a09      	ldr	r2, [pc, #36]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fd3e 	bl	8002710 <HAL_InitTick>

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023c00 	.word	0x40023c00
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	08006744 	.word	0x08006744
 8003cac:	20000014 	.word	0x20000014
 8003cb0:	20000018 	.word	0x20000018

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb8:	b094      	sub	sp, #80	; 0x50
 8003cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ccc:	4b79      	ldr	r3, [pc, #484]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 030c 	and.w	r3, r3, #12
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	f200 80e1 	bhi.w	8003ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d003      	beq.n	8003cee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ce6:	e0db      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4b73      	ldr	r3, [pc, #460]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cec:	e0db      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cee:	4b73      	ldr	r3, [pc, #460]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8003cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cf2:	e0d8      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf4:	4b6f      	ldr	r3, [pc, #444]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cfe:	4b6d      	ldr	r3, [pc, #436]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d063      	beq.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0a:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	099b      	lsrs	r3, r3, #6
 8003d10:	2200      	movs	r2, #0
 8003d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d1e:	2300      	movs	r3, #0
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
 8003d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d26:	4622      	mov	r2, r4
 8003d28:	462b      	mov	r3, r5
 8003d2a:	f04f 0000 	mov.w	r0, #0
 8003d2e:	f04f 0100 	mov.w	r1, #0
 8003d32:	0159      	lsls	r1, r3, #5
 8003d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d38:	0150      	lsls	r0, r2, #5
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4621      	mov	r1, r4
 8003d40:	1a51      	subs	r1, r2, r1
 8003d42:	6139      	str	r1, [r7, #16]
 8003d44:	4629      	mov	r1, r5
 8003d46:	eb63 0301 	sbc.w	r3, r3, r1
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d58:	4659      	mov	r1, fp
 8003d5a:	018b      	lsls	r3, r1, #6
 8003d5c:	4651      	mov	r1, sl
 8003d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d62:	4651      	mov	r1, sl
 8003d64:	018a      	lsls	r2, r1, #6
 8003d66:	4651      	mov	r1, sl
 8003d68:	ebb2 0801 	subs.w	r8, r2, r1
 8003d6c:	4659      	mov	r1, fp
 8003d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d86:	4690      	mov	r8, r2
 8003d88:	4699      	mov	r9, r3
 8003d8a:	4623      	mov	r3, r4
 8003d8c:	eb18 0303 	adds.w	r3, r8, r3
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	462b      	mov	r3, r5
 8003d94:	eb49 0303 	adc.w	r3, r9, r3
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003da6:	4629      	mov	r1, r5
 8003da8:	024b      	lsls	r3, r1, #9
 8003daa:	4621      	mov	r1, r4
 8003dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003db0:	4621      	mov	r1, r4
 8003db2:	024a      	lsls	r2, r1, #9
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dba:	2200      	movs	r2, #0
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dc4:	f7fc fd9a 	bl	80008fc <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4613      	mov	r3, r2
 8003dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd0:	e058      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd2:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	099b      	lsrs	r3, r3, #6
 8003dd8:	2200      	movs	r2, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	4611      	mov	r1, r2
 8003dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	2300      	movs	r3, #0
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
 8003de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dec:	4642      	mov	r2, r8
 8003dee:	464b      	mov	r3, r9
 8003df0:	f04f 0000 	mov.w	r0, #0
 8003df4:	f04f 0100 	mov.w	r1, #0
 8003df8:	0159      	lsls	r1, r3, #5
 8003dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dfe:	0150      	lsls	r0, r2, #5
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4641      	mov	r1, r8
 8003e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e24:	ebb2 040a 	subs.w	r4, r2, sl
 8003e28:	eb63 050b 	sbc.w	r5, r3, fp
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	00eb      	lsls	r3, r5, #3
 8003e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e3a:	00e2      	lsls	r2, r4, #3
 8003e3c:	4614      	mov	r4, r2
 8003e3e:	461d      	mov	r5, r3
 8003e40:	4643      	mov	r3, r8
 8003e42:	18e3      	adds	r3, r4, r3
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	464b      	mov	r3, r9
 8003e48:	eb45 0303 	adc.w	r3, r5, r3
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	028b      	lsls	r3, r1, #10
 8003e5e:	4621      	mov	r1, r4
 8003e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e64:	4621      	mov	r1, r4
 8003e66:	028a      	lsls	r2, r1, #10
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6e:	2200      	movs	r2, #0
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	61fa      	str	r2, [r7, #28]
 8003e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e78:	f7fc fd40 	bl	80008fc <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4613      	mov	r3, r2
 8003e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e9e:	e002      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3750      	adds	r7, #80	; 0x50
 8003eac:	46bd      	mov	sp, r7
 8003eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	007a1200 	.word	0x007a1200

08003ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d075      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ef4:	4b91      	ldr	r3, [pc, #580]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003efa:	f7fe fc4d 	bl	8002798 <HAL_GetTick>
 8003efe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f00:	e008      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f02:	f7fe fc49 	bl	8002798 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e189      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f14:	4b8a      	ldr	r3, [pc, #552]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f0      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d009      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	019a      	lsls	r2, r3, #6
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	071b      	lsls	r3, r3, #28
 8003f38:	4981      	ldr	r1, [pc, #516]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01f      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f4c:	4b7c      	ldr	r3, [pc, #496]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f52:	0f1b      	lsrs	r3, r3, #28
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	019a      	lsls	r2, r3, #6
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	431a      	orrs	r2, r3
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	071b      	lsls	r3, r3, #28
 8003f6c:	4974      	ldr	r1, [pc, #464]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f74:	4b72      	ldr	r3, [pc, #456]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7a:	f023 021f 	bic.w	r2, r3, #31
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	496e      	ldr	r1, [pc, #440]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00d      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	019a      	lsls	r2, r3, #6
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	071b      	lsls	r3, r3, #28
 8003fac:	4964      	ldr	r1, [pc, #400]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fb4:	4b61      	ldr	r3, [pc, #388]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fba:	f7fe fbed 	bl	8002798 <HAL_GetTick>
 8003fbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fc2:	f7fe fbe9 	bl	8002798 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e129      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fd4:	4b5a      	ldr	r3, [pc, #360]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d079      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ff8:	4b52      	ldr	r3, [pc, #328]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ffe:	f7fe fbcb 	bl	8002798 <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004006:	f7fe fbc7 	bl	8002798 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e107      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004018:	4b49      	ldr	r3, [pc, #292]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004024:	d0ef      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d020      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004032:	4b43      	ldr	r3, [pc, #268]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004038:	0f1b      	lsrs	r3, r3, #28
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	019a      	lsls	r2, r3, #6
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	061b      	lsls	r3, r3, #24
 800404c:	431a      	orrs	r2, r3
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	071b      	lsls	r3, r3, #28
 8004052:	493b      	ldr	r1, [pc, #236]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800405a:	4b39      	ldr	r3, [pc, #228]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800405c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004060:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	3b01      	subs	r3, #1
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	4934      	ldr	r1, [pc, #208]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01e      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004080:	4b2f      	ldr	r3, [pc, #188]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004086:	0e1b      	lsrs	r3, r3, #24
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	019a      	lsls	r2, r3, #6
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	061b      	lsls	r3, r3, #24
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	071b      	lsls	r3, r3, #28
 80040a0:	4927      	ldr	r1, [pc, #156]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040a8:	4b25      	ldr	r3, [pc, #148]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	4922      	ldr	r1, [pc, #136]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040be:	4b21      	ldr	r3, [pc, #132]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040c4:	f7fe fb68 	bl	8002798 <HAL_GetTick>
 80040c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80040cc:	f7fe fb64 	bl	8002798 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0a4      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040de:	4b18      	ldr	r3, [pc, #96]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ea:	d1ef      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 808b 	beq.w	8004210 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	4a0f      	ldr	r2, [pc, #60]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004108:	6413      	str	r3, [r2, #64]	; 0x40
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a0b      	ldr	r2, [pc, #44]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800411c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004120:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004122:	f7fe fb39 	bl	8002798 <HAL_GetTick>
 8004126:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004128:	e010      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800412a:	f7fe fb35 	bl	8002798 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d909      	bls.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e075      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800413c:	42470068 	.word	0x42470068
 8004140:	40023800 	.word	0x40023800
 8004144:	42470070 	.word	0x42470070
 8004148:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800414c:	4b38      	ldr	r3, [pc, #224]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0e8      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004158:	4b36      	ldr	r3, [pc, #216]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800415a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004160:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02f      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	429a      	cmp	r2, r3
 8004174:	d028      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004176:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004180:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004186:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800418c:	4a29      	ldr	r2, [pc, #164]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004192:	4b28      	ldr	r3, [pc, #160]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d114      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800419e:	f7fe fafb 	bl	8002798 <HAL_GetTick>
 80041a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a4:	e00a      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a6:	f7fe faf7 	bl	8002798 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d901      	bls.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e035      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041bc:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ee      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d4:	d10d      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80041d6:	4b17      	ldr	r3, [pc, #92]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ea:	4912      	ldr	r1, [pc, #72]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	608b      	str	r3, [r1, #8]
 80041f0:	e005      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80041f2:	4b10      	ldr	r3, [pc, #64]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	4a0f      	ldr	r2, [pc, #60]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041fc:	6093      	str	r3, [r2, #8]
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004200:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420a:	490a      	ldr	r1, [pc, #40]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800420c:	4313      	orrs	r3, r2
 800420e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004224:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40007000 	.word	0x40007000
 8004234:	40023800 	.word	0x40023800
 8004238:	42470e40 	.word	0x42470e40
 800423c:	424711e0 	.word	0x424711e0

08004240 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e01c      	b.n	800428c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	795b      	ldrb	r3, [r3, #5]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fe f90e 	bl	8002484 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0204 	orr.w	r2, r2, #4
 800427c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	791b      	ldrb	r3, [r3, #4]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_RNG_GenerateRandomNumber+0x1a>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e044      	b.n	8004338 <HAL_RNG_GenerateRandomNumber+0xa4>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	795b      	ldrb	r3, [r3, #5]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d133      	bne.n	8004326 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042c4:	f7fe fa68 	bl	8002798 <HAL_GetTick>
 80042c8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80042ca:	e018      	b.n	80042fe <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80042cc:	f7fe fa64 	bl	8002798 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d911      	bls.n	80042fe <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d00a      	beq.n	80042fe <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2202      	movs	r2, #2
 80042f2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e01c      	b.n	8004338 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b01      	cmp	r3, #1
 800430a:	d1df      	bne.n	80042cc <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	715a      	strb	r2, [r3, #5]
 8004324:	e004      	b.n	8004330 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2204      	movs	r2, #4
 800432a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	711a      	strb	r2, [r3, #4]

  return status;
 8004336:	7bfb      	ldrb	r3, [r7, #15]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e07b      	b.n	800444a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	2b00      	cmp	r3, #0
 8004358:	d108      	bne.n	800436c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004362:	d009      	beq.n	8004378 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	61da      	str	r2, [r3, #28]
 800436a:	e005      	b.n	8004378 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fe f898 	bl	80024c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	ea42 0103 	orr.w	r1, r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	f003 0104 	and.w	r1, r3, #4
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	f003 0210 	and.w	r2, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004438:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e01a      	b.n	800449a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fe f86b 	bl	8002558 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b088      	sub	sp, #32
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_SPI_Transmit+0x22>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e126      	b.n	8004712 <HAL_SPI_Transmit+0x270>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044cc:	f7fe f964 	bl	8002798 <HAL_GetTick>
 80044d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d002      	beq.n	80044e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044e2:	2302      	movs	r3, #2
 80044e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044e6:	e10b      	b.n	8004700 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_SPI_Transmit+0x52>
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d102      	bne.n	80044fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044f8:	e102      	b.n	8004700 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2203      	movs	r2, #3
 80044fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	88fa      	ldrh	r2, [r7, #6]
 8004518:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004540:	d10f      	bne.n	8004562 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004550:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004560:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d007      	beq.n	8004580 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800457e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004588:	d14b      	bne.n	8004622 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <HAL_SPI_Transmit+0xf6>
 8004592:	8afb      	ldrh	r3, [r7, #22]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d13e      	bne.n	8004616 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	881a      	ldrh	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	1c9a      	adds	r2, r3, #2
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045bc:	e02b      	b.n	8004616 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d112      	bne.n	80045f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	881a      	ldrh	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	1c9a      	adds	r2, r3, #2
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80045f0:	e011      	b.n	8004616 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045f2:	f7fe f8d1 	bl	8002798 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d803      	bhi.n	800460a <HAL_SPI_Transmit+0x168>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004608:	d102      	bne.n	8004610 <HAL_SPI_Transmit+0x16e>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004614:	e074      	b.n	8004700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1ce      	bne.n	80045be <HAL_SPI_Transmit+0x11c>
 8004620:	e04c      	b.n	80046bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_SPI_Transmit+0x18e>
 800462a:	8afb      	ldrh	r3, [r7, #22]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d140      	bne.n	80046b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	330c      	adds	r3, #12
 800463a:	7812      	ldrb	r2, [r2, #0]
 800463c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004656:	e02c      	b.n	80046b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b02      	cmp	r3, #2
 8004664:	d113      	bne.n	800468e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	330c      	adds	r3, #12
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	86da      	strh	r2, [r3, #54]	; 0x36
 800468c:	e011      	b.n	80046b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800468e:	f7fe f883 	bl	8002798 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d803      	bhi.n	80046a6 <HAL_SPI_Transmit+0x204>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a4:	d102      	bne.n	80046ac <HAL_SPI_Transmit+0x20a>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046b0:	e026      	b.n	8004700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1cd      	bne.n	8004658 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	6839      	ldr	r1, [r7, #0]
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fa63 	bl	8004b8c <SPI_EndRxTxTransaction>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046da:	2300      	movs	r3, #0
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e000      	b.n	8004700 <HAL_SPI_Transmit+0x25e>
  }

error:
 80046fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004710:	7ffb      	ldrb	r3, [r7, #31]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b08c      	sub	sp, #48	; 0x30
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004728:	2301      	movs	r3, #1
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x26>
 800473c:	2302      	movs	r3, #2
 800473e:	e18a      	b.n	8004a56 <HAL_SPI_TransmitReceive+0x33c>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004748:	f7fe f826 	bl	8002798 <HAL_GetTick>
 800474c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800475e:	887b      	ldrh	r3, [r7, #2]
 8004760:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004762:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004766:	2b01      	cmp	r3, #1
 8004768:	d00f      	beq.n	800478a <HAL_SPI_TransmitReceive+0x70>
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004770:	d107      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x68>
 800477a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800477e:	2b04      	cmp	r3, #4
 8004780:	d003      	beq.n	800478a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004782:	2302      	movs	r3, #2
 8004784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004788:	e15b      	b.n	8004a42 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_SPI_TransmitReceive+0x82>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_SPI_TransmitReceive+0x82>
 8004796:	887b      	ldrh	r3, [r7, #2]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d103      	bne.n	80047a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047a2:	e14e      	b.n	8004a42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d003      	beq.n	80047b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2205      	movs	r2, #5
 80047b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	887a      	ldrh	r2, [r7, #2]
 80047c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	887a      	ldrh	r2, [r7, #2]
 80047ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	887a      	ldrh	r2, [r7, #2]
 80047da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	887a      	ldrh	r2, [r7, #2]
 80047e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d007      	beq.n	800480c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800480a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004814:	d178      	bne.n	8004908 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_SPI_TransmitReceive+0x10a>
 800481e:	8b7b      	ldrh	r3, [r7, #26]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d166      	bne.n	80048f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	881a      	ldrh	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	1c9a      	adds	r2, r3, #2
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004848:	e053      	b.n	80048f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b02      	cmp	r3, #2
 8004856:	d11b      	bne.n	8004890 <HAL_SPI_TransmitReceive+0x176>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_SPI_TransmitReceive+0x176>
 8004862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d113      	bne.n	8004890 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	881a      	ldrh	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	1c9a      	adds	r2, r3, #2
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b01      	cmp	r3, #1
 800489c:	d119      	bne.n	80048d2 <HAL_SPI_TransmitReceive+0x1b8>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d014      	beq.n	80048d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	b292      	uxth	r2, r2
 80048b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	1c9a      	adds	r2, r3, #2
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048ce:	2301      	movs	r3, #1
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048d2:	f7fd ff61 	bl	8002798 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048de:	429a      	cmp	r2, r3
 80048e0:	d807      	bhi.n	80048f2 <HAL_SPI_TransmitReceive+0x1d8>
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048e8:	d003      	beq.n	80048f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048f0:	e0a7      	b.n	8004a42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1a6      	bne.n	800484a <HAL_SPI_TransmitReceive+0x130>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1a1      	bne.n	800484a <HAL_SPI_TransmitReceive+0x130>
 8004906:	e07c      	b.n	8004a02 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <HAL_SPI_TransmitReceive+0x1fc>
 8004910:	8b7b      	ldrh	r3, [r7, #26]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d16b      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	7812      	ldrb	r2, [r2, #0]
 8004922:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800493c:	e057      	b.n	80049ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b02      	cmp	r3, #2
 800494a:	d11c      	bne.n	8004986 <HAL_SPI_TransmitReceive+0x26c>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d017      	beq.n	8004986 <HAL_SPI_TransmitReceive+0x26c>
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d114      	bne.n	8004986 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	7812      	ldrb	r2, [r2, #0]
 8004968:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d119      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x2ae>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d014      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049c4:	2301      	movs	r3, #1
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049c8:	f7fd fee6 	bl	8002798 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d803      	bhi.n	80049e0 <HAL_SPI_TransmitReceive+0x2c6>
 80049d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049de:	d102      	bne.n	80049e6 <HAL_SPI_TransmitReceive+0x2cc>
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049ec:	e029      	b.n	8004a42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1a2      	bne.n	800493e <HAL_SPI_TransmitReceive+0x224>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d19d      	bne.n	800493e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f8c0 	bl	8004b8c <SPI_EndRxTxTransaction>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d006      	beq.n	8004a20 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a1e:	e010      	b.n	8004a42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	e000      	b.n	8004a42 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3730      	adds	r7, #48	; 0x30
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a6c:	b2db      	uxtb	r3, r3
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a8c:	f7fd fe84 	bl	8002798 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	4413      	add	r3, r2
 8004a9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a9c:	f7fd fe7c 	bl	8002798 <HAL_GetTick>
 8004aa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aa2:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	015b      	lsls	r3, r3, #5
 8004aa8:	0d1b      	lsrs	r3, r3, #20
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	fb02 f303 	mul.w	r3, r2, r3
 8004ab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab2:	e054      	b.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aba:	d050      	beq.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004abc:	f7fd fe6c 	bl	8002798 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d902      	bls.n	8004ad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d13d      	bne.n	8004b4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aea:	d111      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af4:	d004      	beq.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afe:	d107      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b18:	d10f      	bne.n	8004b3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e017      	b.n	8004b7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4013      	ands	r3, r2
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d19b      	bne.n	8004ab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000014 	.word	0x20000014

08004b8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b98:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <SPI_EndRxTxTransaction+0x7c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <SPI_EndRxTxTransaction+0x80>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	0d5b      	lsrs	r3, r3, #21
 8004ba4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ba8:	fb02 f303 	mul.w	r3, r2, r3
 8004bac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb6:	d112      	bne.n	8004bde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2180      	movs	r1, #128	; 0x80
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7ff ff5a 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d016      	beq.n	8004bfc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e00f      	b.n	8004bfe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf4:	2b80      	cmp	r3, #128	; 0x80
 8004bf6:	d0f2      	beq.n	8004bde <SPI_EndRxTxTransaction+0x52>
 8004bf8:	e000      	b.n	8004bfc <SPI_EndRxTxTransaction+0x70>
        break;
 8004bfa:	bf00      	nop
  }

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000014 	.word	0x20000014
 8004c0c:	165e9f81 	.word	0x165e9f81

08004c10 <siprintf>:
 8004c10:	b40e      	push	{r1, r2, r3}
 8004c12:	b500      	push	{lr}
 8004c14:	b09c      	sub	sp, #112	; 0x70
 8004c16:	ab1d      	add	r3, sp, #116	; 0x74
 8004c18:	9002      	str	r0, [sp, #8]
 8004c1a:	9006      	str	r0, [sp, #24]
 8004c1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c20:	4809      	ldr	r0, [pc, #36]	; (8004c48 <siprintf+0x38>)
 8004c22:	9107      	str	r1, [sp, #28]
 8004c24:	9104      	str	r1, [sp, #16]
 8004c26:	4909      	ldr	r1, [pc, #36]	; (8004c4c <siprintf+0x3c>)
 8004c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c2c:	9105      	str	r1, [sp, #20]
 8004c2e:	6800      	ldr	r0, [r0, #0]
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	a902      	add	r1, sp, #8
 8004c34:	f000 f89a 	bl	8004d6c <_svfiprintf_r>
 8004c38:	9b02      	ldr	r3, [sp, #8]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	b01c      	add	sp, #112	; 0x70
 8004c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c44:	b003      	add	sp, #12
 8004c46:	4770      	bx	lr
 8004c48:	2000006c 	.word	0x2000006c
 8004c4c:	ffff0208 	.word	0xffff0208

08004c50 <memset>:
 8004c50:	4402      	add	r2, r0
 8004c52:	4603      	mov	r3, r0
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d100      	bne.n	8004c5a <memset+0xa>
 8004c58:	4770      	bx	lr
 8004c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c5e:	e7f9      	b.n	8004c54 <memset+0x4>

08004c60 <__errno>:
 8004c60:	4b01      	ldr	r3, [pc, #4]	; (8004c68 <__errno+0x8>)
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	2000006c 	.word	0x2000006c

08004c6c <__libc_init_array>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	4d0d      	ldr	r5, [pc, #52]	; (8004ca4 <__libc_init_array+0x38>)
 8004c70:	4c0d      	ldr	r4, [pc, #52]	; (8004ca8 <__libc_init_array+0x3c>)
 8004c72:	1b64      	subs	r4, r4, r5
 8004c74:	10a4      	asrs	r4, r4, #2
 8004c76:	2600      	movs	r6, #0
 8004c78:	42a6      	cmp	r6, r4
 8004c7a:	d109      	bne.n	8004c90 <__libc_init_array+0x24>
 8004c7c:	4d0b      	ldr	r5, [pc, #44]	; (8004cac <__libc_init_array+0x40>)
 8004c7e:	4c0c      	ldr	r4, [pc, #48]	; (8004cb0 <__libc_init_array+0x44>)
 8004c80:	f000 fc6a 	bl	8005558 <_init>
 8004c84:	1b64      	subs	r4, r4, r5
 8004c86:	10a4      	asrs	r4, r4, #2
 8004c88:	2600      	movs	r6, #0
 8004c8a:	42a6      	cmp	r6, r4
 8004c8c:	d105      	bne.n	8004c9a <__libc_init_array+0x2e>
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c94:	4798      	blx	r3
 8004c96:	3601      	adds	r6, #1
 8004c98:	e7ee      	b.n	8004c78 <__libc_init_array+0xc>
 8004c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9e:	4798      	blx	r3
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	e7f2      	b.n	8004c8a <__libc_init_array+0x1e>
 8004ca4:	08006790 	.word	0x08006790
 8004ca8:	08006790 	.word	0x08006790
 8004cac:	08006790 	.word	0x08006790
 8004cb0:	08006794 	.word	0x08006794

08004cb4 <__retarget_lock_acquire_recursive>:
 8004cb4:	4770      	bx	lr

08004cb6 <__retarget_lock_release_recursive>:
 8004cb6:	4770      	bx	lr

08004cb8 <__ssputs_r>:
 8004cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cbc:	688e      	ldr	r6, [r1, #8]
 8004cbe:	461f      	mov	r7, r3
 8004cc0:	42be      	cmp	r6, r7
 8004cc2:	680b      	ldr	r3, [r1, #0]
 8004cc4:	4682      	mov	sl, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	4690      	mov	r8, r2
 8004cca:	d82c      	bhi.n	8004d26 <__ssputs_r+0x6e>
 8004ccc:	898a      	ldrh	r2, [r1, #12]
 8004cce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cd2:	d026      	beq.n	8004d22 <__ssputs_r+0x6a>
 8004cd4:	6965      	ldr	r5, [r4, #20]
 8004cd6:	6909      	ldr	r1, [r1, #16]
 8004cd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cdc:	eba3 0901 	sub.w	r9, r3, r1
 8004ce0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ce4:	1c7b      	adds	r3, r7, #1
 8004ce6:	444b      	add	r3, r9
 8004ce8:	106d      	asrs	r5, r5, #1
 8004cea:	429d      	cmp	r5, r3
 8004cec:	bf38      	it	cc
 8004cee:	461d      	movcc	r5, r3
 8004cf0:	0553      	lsls	r3, r2, #21
 8004cf2:	d527      	bpl.n	8004d44 <__ssputs_r+0x8c>
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	f000 f957 	bl	8004fa8 <_malloc_r>
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	b360      	cbz	r0, 8004d58 <__ssputs_r+0xa0>
 8004cfe:	6921      	ldr	r1, [r4, #16]
 8004d00:	464a      	mov	r2, r9
 8004d02:	f000 fbc7 	bl	8005494 <memcpy>
 8004d06:	89a3      	ldrh	r3, [r4, #12]
 8004d08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d10:	81a3      	strh	r3, [r4, #12]
 8004d12:	6126      	str	r6, [r4, #16]
 8004d14:	6165      	str	r5, [r4, #20]
 8004d16:	444e      	add	r6, r9
 8004d18:	eba5 0509 	sub.w	r5, r5, r9
 8004d1c:	6026      	str	r6, [r4, #0]
 8004d1e:	60a5      	str	r5, [r4, #8]
 8004d20:	463e      	mov	r6, r7
 8004d22:	42be      	cmp	r6, r7
 8004d24:	d900      	bls.n	8004d28 <__ssputs_r+0x70>
 8004d26:	463e      	mov	r6, r7
 8004d28:	6820      	ldr	r0, [r4, #0]
 8004d2a:	4632      	mov	r2, r6
 8004d2c:	4641      	mov	r1, r8
 8004d2e:	f000 fb86 	bl	800543e <memmove>
 8004d32:	68a3      	ldr	r3, [r4, #8]
 8004d34:	1b9b      	subs	r3, r3, r6
 8004d36:	60a3      	str	r3, [r4, #8]
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	4433      	add	r3, r6
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d44:	462a      	mov	r2, r5
 8004d46:	f000 fb4b 	bl	80053e0 <_realloc_r>
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d1e0      	bne.n	8004d12 <__ssputs_r+0x5a>
 8004d50:	6921      	ldr	r1, [r4, #16]
 8004d52:	4650      	mov	r0, sl
 8004d54:	f000 fbac 	bl	80054b0 <_free_r>
 8004d58:	230c      	movs	r3, #12
 8004d5a:	f8ca 3000 	str.w	r3, [sl]
 8004d5e:	89a3      	ldrh	r3, [r4, #12]
 8004d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d64:	81a3      	strh	r3, [r4, #12]
 8004d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d6a:	e7e9      	b.n	8004d40 <__ssputs_r+0x88>

08004d6c <_svfiprintf_r>:
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	4698      	mov	r8, r3
 8004d72:	898b      	ldrh	r3, [r1, #12]
 8004d74:	061b      	lsls	r3, r3, #24
 8004d76:	b09d      	sub	sp, #116	; 0x74
 8004d78:	4607      	mov	r7, r0
 8004d7a:	460d      	mov	r5, r1
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	d50e      	bpl.n	8004d9e <_svfiprintf_r+0x32>
 8004d80:	690b      	ldr	r3, [r1, #16]
 8004d82:	b963      	cbnz	r3, 8004d9e <_svfiprintf_r+0x32>
 8004d84:	2140      	movs	r1, #64	; 0x40
 8004d86:	f000 f90f 	bl	8004fa8 <_malloc_r>
 8004d8a:	6028      	str	r0, [r5, #0]
 8004d8c:	6128      	str	r0, [r5, #16]
 8004d8e:	b920      	cbnz	r0, 8004d9a <_svfiprintf_r+0x2e>
 8004d90:	230c      	movs	r3, #12
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d98:	e0d0      	b.n	8004f3c <_svfiprintf_r+0x1d0>
 8004d9a:	2340      	movs	r3, #64	; 0x40
 8004d9c:	616b      	str	r3, [r5, #20]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	9309      	str	r3, [sp, #36]	; 0x24
 8004da2:	2320      	movs	r3, #32
 8004da4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004da8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dac:	2330      	movs	r3, #48	; 0x30
 8004dae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004f54 <_svfiprintf_r+0x1e8>
 8004db2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004db6:	f04f 0901 	mov.w	r9, #1
 8004dba:	4623      	mov	r3, r4
 8004dbc:	469a      	mov	sl, r3
 8004dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dc2:	b10a      	cbz	r2, 8004dc8 <_svfiprintf_r+0x5c>
 8004dc4:	2a25      	cmp	r2, #37	; 0x25
 8004dc6:	d1f9      	bne.n	8004dbc <_svfiprintf_r+0x50>
 8004dc8:	ebba 0b04 	subs.w	fp, sl, r4
 8004dcc:	d00b      	beq.n	8004de6 <_svfiprintf_r+0x7a>
 8004dce:	465b      	mov	r3, fp
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	f7ff ff6f 	bl	8004cb8 <__ssputs_r>
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f000 80a9 	beq.w	8004f32 <_svfiprintf_r+0x1c6>
 8004de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004de2:	445a      	add	r2, fp
 8004de4:	9209      	str	r2, [sp, #36]	; 0x24
 8004de6:	f89a 3000 	ldrb.w	r3, [sl]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80a1 	beq.w	8004f32 <_svfiprintf_r+0x1c6>
 8004df0:	2300      	movs	r3, #0
 8004df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dfa:	f10a 0a01 	add.w	sl, sl, #1
 8004dfe:	9304      	str	r3, [sp, #16]
 8004e00:	9307      	str	r3, [sp, #28]
 8004e02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e06:	931a      	str	r3, [sp, #104]	; 0x68
 8004e08:	4654      	mov	r4, sl
 8004e0a:	2205      	movs	r2, #5
 8004e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e10:	4850      	ldr	r0, [pc, #320]	; (8004f54 <_svfiprintf_r+0x1e8>)
 8004e12:	f7fb f9ed 	bl	80001f0 <memchr>
 8004e16:	9a04      	ldr	r2, [sp, #16]
 8004e18:	b9d8      	cbnz	r0, 8004e52 <_svfiprintf_r+0xe6>
 8004e1a:	06d0      	lsls	r0, r2, #27
 8004e1c:	bf44      	itt	mi
 8004e1e:	2320      	movmi	r3, #32
 8004e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e24:	0711      	lsls	r1, r2, #28
 8004e26:	bf44      	itt	mi
 8004e28:	232b      	movmi	r3, #43	; 0x2b
 8004e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e32:	2b2a      	cmp	r3, #42	; 0x2a
 8004e34:	d015      	beq.n	8004e62 <_svfiprintf_r+0xf6>
 8004e36:	9a07      	ldr	r2, [sp, #28]
 8004e38:	4654      	mov	r4, sl
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f04f 0c0a 	mov.w	ip, #10
 8004e40:	4621      	mov	r1, r4
 8004e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e46:	3b30      	subs	r3, #48	; 0x30
 8004e48:	2b09      	cmp	r3, #9
 8004e4a:	d94d      	bls.n	8004ee8 <_svfiprintf_r+0x17c>
 8004e4c:	b1b0      	cbz	r0, 8004e7c <_svfiprintf_r+0x110>
 8004e4e:	9207      	str	r2, [sp, #28]
 8004e50:	e014      	b.n	8004e7c <_svfiprintf_r+0x110>
 8004e52:	eba0 0308 	sub.w	r3, r0, r8
 8004e56:	fa09 f303 	lsl.w	r3, r9, r3
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	9304      	str	r3, [sp, #16]
 8004e5e:	46a2      	mov	sl, r4
 8004e60:	e7d2      	b.n	8004e08 <_svfiprintf_r+0x9c>
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	1d19      	adds	r1, r3, #4
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	9103      	str	r1, [sp, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bfbb      	ittet	lt
 8004e6e:	425b      	neglt	r3, r3
 8004e70:	f042 0202 	orrlt.w	r2, r2, #2
 8004e74:	9307      	strge	r3, [sp, #28]
 8004e76:	9307      	strlt	r3, [sp, #28]
 8004e78:	bfb8      	it	lt
 8004e7a:	9204      	strlt	r2, [sp, #16]
 8004e7c:	7823      	ldrb	r3, [r4, #0]
 8004e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e80:	d10c      	bne.n	8004e9c <_svfiprintf_r+0x130>
 8004e82:	7863      	ldrb	r3, [r4, #1]
 8004e84:	2b2a      	cmp	r3, #42	; 0x2a
 8004e86:	d134      	bne.n	8004ef2 <_svfiprintf_r+0x186>
 8004e88:	9b03      	ldr	r3, [sp, #12]
 8004e8a:	1d1a      	adds	r2, r3, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	9203      	str	r2, [sp, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bfb8      	it	lt
 8004e94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e98:	3402      	adds	r4, #2
 8004e9a:	9305      	str	r3, [sp, #20]
 8004e9c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004f64 <_svfiprintf_r+0x1f8>
 8004ea0:	7821      	ldrb	r1, [r4, #0]
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	4650      	mov	r0, sl
 8004ea6:	f7fb f9a3 	bl	80001f0 <memchr>
 8004eaa:	b138      	cbz	r0, 8004ebc <_svfiprintf_r+0x150>
 8004eac:	9b04      	ldr	r3, [sp, #16]
 8004eae:	eba0 000a 	sub.w	r0, r0, sl
 8004eb2:	2240      	movs	r2, #64	; 0x40
 8004eb4:	4082      	lsls	r2, r0
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	3401      	adds	r4, #1
 8004eba:	9304      	str	r3, [sp, #16]
 8004ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec0:	4825      	ldr	r0, [pc, #148]	; (8004f58 <_svfiprintf_r+0x1ec>)
 8004ec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ec6:	2206      	movs	r2, #6
 8004ec8:	f7fb f992 	bl	80001f0 <memchr>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d038      	beq.n	8004f42 <_svfiprintf_r+0x1d6>
 8004ed0:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <_svfiprintf_r+0x1f0>)
 8004ed2:	bb1b      	cbnz	r3, 8004f1c <_svfiprintf_r+0x1b0>
 8004ed4:	9b03      	ldr	r3, [sp, #12]
 8004ed6:	3307      	adds	r3, #7
 8004ed8:	f023 0307 	bic.w	r3, r3, #7
 8004edc:	3308      	adds	r3, #8
 8004ede:	9303      	str	r3, [sp, #12]
 8004ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee2:	4433      	add	r3, r6
 8004ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee6:	e768      	b.n	8004dba <_svfiprintf_r+0x4e>
 8004ee8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eec:	460c      	mov	r4, r1
 8004eee:	2001      	movs	r0, #1
 8004ef0:	e7a6      	b.n	8004e40 <_svfiprintf_r+0xd4>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	3401      	adds	r4, #1
 8004ef6:	9305      	str	r3, [sp, #20]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	f04f 0c0a 	mov.w	ip, #10
 8004efe:	4620      	mov	r0, r4
 8004f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f04:	3a30      	subs	r2, #48	; 0x30
 8004f06:	2a09      	cmp	r2, #9
 8004f08:	d903      	bls.n	8004f12 <_svfiprintf_r+0x1a6>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0c6      	beq.n	8004e9c <_svfiprintf_r+0x130>
 8004f0e:	9105      	str	r1, [sp, #20]
 8004f10:	e7c4      	b.n	8004e9c <_svfiprintf_r+0x130>
 8004f12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f16:	4604      	mov	r4, r0
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e7f0      	b.n	8004efe <_svfiprintf_r+0x192>
 8004f1c:	ab03      	add	r3, sp, #12
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	462a      	mov	r2, r5
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <_svfiprintf_r+0x1f4>)
 8004f24:	a904      	add	r1, sp, #16
 8004f26:	4638      	mov	r0, r7
 8004f28:	f3af 8000 	nop.w
 8004f2c:	1c42      	adds	r2, r0, #1
 8004f2e:	4606      	mov	r6, r0
 8004f30:	d1d6      	bne.n	8004ee0 <_svfiprintf_r+0x174>
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	065b      	lsls	r3, r3, #25
 8004f36:	f53f af2d 	bmi.w	8004d94 <_svfiprintf_r+0x28>
 8004f3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f3c:	b01d      	add	sp, #116	; 0x74
 8004f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f42:	ab03      	add	r3, sp, #12
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	462a      	mov	r2, r5
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <_svfiprintf_r+0x1f4>)
 8004f4a:	a904      	add	r1, sp, #16
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	f000 f919 	bl	8005184 <_printf_i>
 8004f52:	e7eb      	b.n	8004f2c <_svfiprintf_r+0x1c0>
 8004f54:	08006754 	.word	0x08006754
 8004f58:	0800675e 	.word	0x0800675e
 8004f5c:	00000000 	.word	0x00000000
 8004f60:	08004cb9 	.word	0x08004cb9
 8004f64:	0800675a 	.word	0x0800675a

08004f68 <sbrk_aligned>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	4e0e      	ldr	r6, [pc, #56]	; (8004fa4 <sbrk_aligned+0x3c>)
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	6831      	ldr	r1, [r6, #0]
 8004f70:	4605      	mov	r5, r0
 8004f72:	b911      	cbnz	r1, 8004f7a <sbrk_aligned+0x12>
 8004f74:	f000 fa7e 	bl	8005474 <_sbrk_r>
 8004f78:	6030      	str	r0, [r6, #0]
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f000 fa79 	bl	8005474 <_sbrk_r>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	d00a      	beq.n	8004f9c <sbrk_aligned+0x34>
 8004f86:	1cc4      	adds	r4, r0, #3
 8004f88:	f024 0403 	bic.w	r4, r4, #3
 8004f8c:	42a0      	cmp	r0, r4
 8004f8e:	d007      	beq.n	8004fa0 <sbrk_aligned+0x38>
 8004f90:	1a21      	subs	r1, r4, r0
 8004f92:	4628      	mov	r0, r5
 8004f94:	f000 fa6e 	bl	8005474 <_sbrk_r>
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d101      	bne.n	8004fa0 <sbrk_aligned+0x38>
 8004f9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	20025ba0 	.word	0x20025ba0

08004fa8 <_malloc_r>:
 8004fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fac:	1ccd      	adds	r5, r1, #3
 8004fae:	f025 0503 	bic.w	r5, r5, #3
 8004fb2:	3508      	adds	r5, #8
 8004fb4:	2d0c      	cmp	r5, #12
 8004fb6:	bf38      	it	cc
 8004fb8:	250c      	movcc	r5, #12
 8004fba:	2d00      	cmp	r5, #0
 8004fbc:	4607      	mov	r7, r0
 8004fbe:	db01      	blt.n	8004fc4 <_malloc_r+0x1c>
 8004fc0:	42a9      	cmp	r1, r5
 8004fc2:	d905      	bls.n	8004fd0 <_malloc_r+0x28>
 8004fc4:	230c      	movs	r3, #12
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	2600      	movs	r6, #0
 8004fca:	4630      	mov	r0, r6
 8004fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80050a4 <_malloc_r+0xfc>
 8004fd4:	f000 f9f8 	bl	80053c8 <__malloc_lock>
 8004fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fdc:	461c      	mov	r4, r3
 8004fde:	bb5c      	cbnz	r4, 8005038 <_malloc_r+0x90>
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	f7ff ffc0 	bl	8004f68 <sbrk_aligned>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	4604      	mov	r4, r0
 8004fec:	d155      	bne.n	800509a <_malloc_r+0xf2>
 8004fee:	f8d8 4000 	ldr.w	r4, [r8]
 8004ff2:	4626      	mov	r6, r4
 8004ff4:	2e00      	cmp	r6, #0
 8004ff6:	d145      	bne.n	8005084 <_malloc_r+0xdc>
 8004ff8:	2c00      	cmp	r4, #0
 8004ffa:	d048      	beq.n	800508e <_malloc_r+0xe6>
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	4631      	mov	r1, r6
 8005000:	4638      	mov	r0, r7
 8005002:	eb04 0903 	add.w	r9, r4, r3
 8005006:	f000 fa35 	bl	8005474 <_sbrk_r>
 800500a:	4581      	cmp	r9, r0
 800500c:	d13f      	bne.n	800508e <_malloc_r+0xe6>
 800500e:	6821      	ldr	r1, [r4, #0]
 8005010:	1a6d      	subs	r5, r5, r1
 8005012:	4629      	mov	r1, r5
 8005014:	4638      	mov	r0, r7
 8005016:	f7ff ffa7 	bl	8004f68 <sbrk_aligned>
 800501a:	3001      	adds	r0, #1
 800501c:	d037      	beq.n	800508e <_malloc_r+0xe6>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	442b      	add	r3, r5
 8005022:	6023      	str	r3, [r4, #0]
 8005024:	f8d8 3000 	ldr.w	r3, [r8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d038      	beq.n	800509e <_malloc_r+0xf6>
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	42a2      	cmp	r2, r4
 8005030:	d12b      	bne.n	800508a <_malloc_r+0xe2>
 8005032:	2200      	movs	r2, #0
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	e00f      	b.n	8005058 <_malloc_r+0xb0>
 8005038:	6822      	ldr	r2, [r4, #0]
 800503a:	1b52      	subs	r2, r2, r5
 800503c:	d41f      	bmi.n	800507e <_malloc_r+0xd6>
 800503e:	2a0b      	cmp	r2, #11
 8005040:	d917      	bls.n	8005072 <_malloc_r+0xca>
 8005042:	1961      	adds	r1, r4, r5
 8005044:	42a3      	cmp	r3, r4
 8005046:	6025      	str	r5, [r4, #0]
 8005048:	bf18      	it	ne
 800504a:	6059      	strne	r1, [r3, #4]
 800504c:	6863      	ldr	r3, [r4, #4]
 800504e:	bf08      	it	eq
 8005050:	f8c8 1000 	streq.w	r1, [r8]
 8005054:	5162      	str	r2, [r4, r5]
 8005056:	604b      	str	r3, [r1, #4]
 8005058:	4638      	mov	r0, r7
 800505a:	f104 060b 	add.w	r6, r4, #11
 800505e:	f000 f9b9 	bl	80053d4 <__malloc_unlock>
 8005062:	f026 0607 	bic.w	r6, r6, #7
 8005066:	1d23      	adds	r3, r4, #4
 8005068:	1af2      	subs	r2, r6, r3
 800506a:	d0ae      	beq.n	8004fca <_malloc_r+0x22>
 800506c:	1b9b      	subs	r3, r3, r6
 800506e:	50a3      	str	r3, [r4, r2]
 8005070:	e7ab      	b.n	8004fca <_malloc_r+0x22>
 8005072:	42a3      	cmp	r3, r4
 8005074:	6862      	ldr	r2, [r4, #4]
 8005076:	d1dd      	bne.n	8005034 <_malloc_r+0x8c>
 8005078:	f8c8 2000 	str.w	r2, [r8]
 800507c:	e7ec      	b.n	8005058 <_malloc_r+0xb0>
 800507e:	4623      	mov	r3, r4
 8005080:	6864      	ldr	r4, [r4, #4]
 8005082:	e7ac      	b.n	8004fde <_malloc_r+0x36>
 8005084:	4634      	mov	r4, r6
 8005086:	6876      	ldr	r6, [r6, #4]
 8005088:	e7b4      	b.n	8004ff4 <_malloc_r+0x4c>
 800508a:	4613      	mov	r3, r2
 800508c:	e7cc      	b.n	8005028 <_malloc_r+0x80>
 800508e:	230c      	movs	r3, #12
 8005090:	603b      	str	r3, [r7, #0]
 8005092:	4638      	mov	r0, r7
 8005094:	f000 f99e 	bl	80053d4 <__malloc_unlock>
 8005098:	e797      	b.n	8004fca <_malloc_r+0x22>
 800509a:	6025      	str	r5, [r4, #0]
 800509c:	e7dc      	b.n	8005058 <_malloc_r+0xb0>
 800509e:	605b      	str	r3, [r3, #4]
 80050a0:	deff      	udf	#255	; 0xff
 80050a2:	bf00      	nop
 80050a4:	20025b9c 	.word	0x20025b9c

080050a8 <_printf_common>:
 80050a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ac:	4616      	mov	r6, r2
 80050ae:	4699      	mov	r9, r3
 80050b0:	688a      	ldr	r2, [r1, #8]
 80050b2:	690b      	ldr	r3, [r1, #16]
 80050b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050b8:	4293      	cmp	r3, r2
 80050ba:	bfb8      	it	lt
 80050bc:	4613      	movlt	r3, r2
 80050be:	6033      	str	r3, [r6, #0]
 80050c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050c4:	4607      	mov	r7, r0
 80050c6:	460c      	mov	r4, r1
 80050c8:	b10a      	cbz	r2, 80050ce <_printf_common+0x26>
 80050ca:	3301      	adds	r3, #1
 80050cc:	6033      	str	r3, [r6, #0]
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	0699      	lsls	r1, r3, #26
 80050d2:	bf42      	ittt	mi
 80050d4:	6833      	ldrmi	r3, [r6, #0]
 80050d6:	3302      	addmi	r3, #2
 80050d8:	6033      	strmi	r3, [r6, #0]
 80050da:	6825      	ldr	r5, [r4, #0]
 80050dc:	f015 0506 	ands.w	r5, r5, #6
 80050e0:	d106      	bne.n	80050f0 <_printf_common+0x48>
 80050e2:	f104 0a19 	add.w	sl, r4, #25
 80050e6:	68e3      	ldr	r3, [r4, #12]
 80050e8:	6832      	ldr	r2, [r6, #0]
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	42ab      	cmp	r3, r5
 80050ee:	dc26      	bgt.n	800513e <_printf_common+0x96>
 80050f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050f4:	1e13      	subs	r3, r2, #0
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	bf18      	it	ne
 80050fa:	2301      	movne	r3, #1
 80050fc:	0692      	lsls	r2, r2, #26
 80050fe:	d42b      	bmi.n	8005158 <_printf_common+0xb0>
 8005100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005104:	4649      	mov	r1, r9
 8005106:	4638      	mov	r0, r7
 8005108:	47c0      	blx	r8
 800510a:	3001      	adds	r0, #1
 800510c:	d01e      	beq.n	800514c <_printf_common+0xa4>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	6922      	ldr	r2, [r4, #16]
 8005112:	f003 0306 	and.w	r3, r3, #6
 8005116:	2b04      	cmp	r3, #4
 8005118:	bf02      	ittt	eq
 800511a:	68e5      	ldreq	r5, [r4, #12]
 800511c:	6833      	ldreq	r3, [r6, #0]
 800511e:	1aed      	subeq	r5, r5, r3
 8005120:	68a3      	ldr	r3, [r4, #8]
 8005122:	bf0c      	ite	eq
 8005124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005128:	2500      	movne	r5, #0
 800512a:	4293      	cmp	r3, r2
 800512c:	bfc4      	itt	gt
 800512e:	1a9b      	subgt	r3, r3, r2
 8005130:	18ed      	addgt	r5, r5, r3
 8005132:	2600      	movs	r6, #0
 8005134:	341a      	adds	r4, #26
 8005136:	42b5      	cmp	r5, r6
 8005138:	d11a      	bne.n	8005170 <_printf_common+0xc8>
 800513a:	2000      	movs	r0, #0
 800513c:	e008      	b.n	8005150 <_printf_common+0xa8>
 800513e:	2301      	movs	r3, #1
 8005140:	4652      	mov	r2, sl
 8005142:	4649      	mov	r1, r9
 8005144:	4638      	mov	r0, r7
 8005146:	47c0      	blx	r8
 8005148:	3001      	adds	r0, #1
 800514a:	d103      	bne.n	8005154 <_printf_common+0xac>
 800514c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005154:	3501      	adds	r5, #1
 8005156:	e7c6      	b.n	80050e6 <_printf_common+0x3e>
 8005158:	18e1      	adds	r1, r4, r3
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	2030      	movs	r0, #48	; 0x30
 800515e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005162:	4422      	add	r2, r4
 8005164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800516c:	3302      	adds	r3, #2
 800516e:	e7c7      	b.n	8005100 <_printf_common+0x58>
 8005170:	2301      	movs	r3, #1
 8005172:	4622      	mov	r2, r4
 8005174:	4649      	mov	r1, r9
 8005176:	4638      	mov	r0, r7
 8005178:	47c0      	blx	r8
 800517a:	3001      	adds	r0, #1
 800517c:	d0e6      	beq.n	800514c <_printf_common+0xa4>
 800517e:	3601      	adds	r6, #1
 8005180:	e7d9      	b.n	8005136 <_printf_common+0x8e>
	...

08005184 <_printf_i>:
 8005184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	7e0f      	ldrb	r7, [r1, #24]
 800518a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800518c:	2f78      	cmp	r7, #120	; 0x78
 800518e:	4691      	mov	r9, r2
 8005190:	4680      	mov	r8, r0
 8005192:	460c      	mov	r4, r1
 8005194:	469a      	mov	sl, r3
 8005196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800519a:	d807      	bhi.n	80051ac <_printf_i+0x28>
 800519c:	2f62      	cmp	r7, #98	; 0x62
 800519e:	d80a      	bhi.n	80051b6 <_printf_i+0x32>
 80051a0:	2f00      	cmp	r7, #0
 80051a2:	f000 80d4 	beq.w	800534e <_printf_i+0x1ca>
 80051a6:	2f58      	cmp	r7, #88	; 0x58
 80051a8:	f000 80c0 	beq.w	800532c <_printf_i+0x1a8>
 80051ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051b4:	e03a      	b.n	800522c <_printf_i+0xa8>
 80051b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051ba:	2b15      	cmp	r3, #21
 80051bc:	d8f6      	bhi.n	80051ac <_printf_i+0x28>
 80051be:	a101      	add	r1, pc, #4	; (adr r1, 80051c4 <_printf_i+0x40>)
 80051c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051c4:	0800521d 	.word	0x0800521d
 80051c8:	08005231 	.word	0x08005231
 80051cc:	080051ad 	.word	0x080051ad
 80051d0:	080051ad 	.word	0x080051ad
 80051d4:	080051ad 	.word	0x080051ad
 80051d8:	080051ad 	.word	0x080051ad
 80051dc:	08005231 	.word	0x08005231
 80051e0:	080051ad 	.word	0x080051ad
 80051e4:	080051ad 	.word	0x080051ad
 80051e8:	080051ad 	.word	0x080051ad
 80051ec:	080051ad 	.word	0x080051ad
 80051f0:	08005335 	.word	0x08005335
 80051f4:	0800525d 	.word	0x0800525d
 80051f8:	080052ef 	.word	0x080052ef
 80051fc:	080051ad 	.word	0x080051ad
 8005200:	080051ad 	.word	0x080051ad
 8005204:	08005357 	.word	0x08005357
 8005208:	080051ad 	.word	0x080051ad
 800520c:	0800525d 	.word	0x0800525d
 8005210:	080051ad 	.word	0x080051ad
 8005214:	080051ad 	.word	0x080051ad
 8005218:	080052f7 	.word	0x080052f7
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	1d1a      	adds	r2, r3, #4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	602a      	str	r2, [r5, #0]
 8005224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800522c:	2301      	movs	r3, #1
 800522e:	e09f      	b.n	8005370 <_printf_i+0x1ec>
 8005230:	6820      	ldr	r0, [r4, #0]
 8005232:	682b      	ldr	r3, [r5, #0]
 8005234:	0607      	lsls	r7, r0, #24
 8005236:	f103 0104 	add.w	r1, r3, #4
 800523a:	6029      	str	r1, [r5, #0]
 800523c:	d501      	bpl.n	8005242 <_printf_i+0xbe>
 800523e:	681e      	ldr	r6, [r3, #0]
 8005240:	e003      	b.n	800524a <_printf_i+0xc6>
 8005242:	0646      	lsls	r6, r0, #25
 8005244:	d5fb      	bpl.n	800523e <_printf_i+0xba>
 8005246:	f9b3 6000 	ldrsh.w	r6, [r3]
 800524a:	2e00      	cmp	r6, #0
 800524c:	da03      	bge.n	8005256 <_printf_i+0xd2>
 800524e:	232d      	movs	r3, #45	; 0x2d
 8005250:	4276      	negs	r6, r6
 8005252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005256:	485a      	ldr	r0, [pc, #360]	; (80053c0 <_printf_i+0x23c>)
 8005258:	230a      	movs	r3, #10
 800525a:	e012      	b.n	8005282 <_printf_i+0xfe>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	6820      	ldr	r0, [r4, #0]
 8005260:	1d19      	adds	r1, r3, #4
 8005262:	6029      	str	r1, [r5, #0]
 8005264:	0605      	lsls	r5, r0, #24
 8005266:	d501      	bpl.n	800526c <_printf_i+0xe8>
 8005268:	681e      	ldr	r6, [r3, #0]
 800526a:	e002      	b.n	8005272 <_printf_i+0xee>
 800526c:	0641      	lsls	r1, r0, #25
 800526e:	d5fb      	bpl.n	8005268 <_printf_i+0xe4>
 8005270:	881e      	ldrh	r6, [r3, #0]
 8005272:	4853      	ldr	r0, [pc, #332]	; (80053c0 <_printf_i+0x23c>)
 8005274:	2f6f      	cmp	r7, #111	; 0x6f
 8005276:	bf0c      	ite	eq
 8005278:	2308      	moveq	r3, #8
 800527a:	230a      	movne	r3, #10
 800527c:	2100      	movs	r1, #0
 800527e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005282:	6865      	ldr	r5, [r4, #4]
 8005284:	60a5      	str	r5, [r4, #8]
 8005286:	2d00      	cmp	r5, #0
 8005288:	bfa2      	ittt	ge
 800528a:	6821      	ldrge	r1, [r4, #0]
 800528c:	f021 0104 	bicge.w	r1, r1, #4
 8005290:	6021      	strge	r1, [r4, #0]
 8005292:	b90e      	cbnz	r6, 8005298 <_printf_i+0x114>
 8005294:	2d00      	cmp	r5, #0
 8005296:	d04b      	beq.n	8005330 <_printf_i+0x1ac>
 8005298:	4615      	mov	r5, r2
 800529a:	fbb6 f1f3 	udiv	r1, r6, r3
 800529e:	fb03 6711 	mls	r7, r3, r1, r6
 80052a2:	5dc7      	ldrb	r7, [r0, r7]
 80052a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052a8:	4637      	mov	r7, r6
 80052aa:	42bb      	cmp	r3, r7
 80052ac:	460e      	mov	r6, r1
 80052ae:	d9f4      	bls.n	800529a <_printf_i+0x116>
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d10b      	bne.n	80052cc <_printf_i+0x148>
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	07de      	lsls	r6, r3, #31
 80052b8:	d508      	bpl.n	80052cc <_printf_i+0x148>
 80052ba:	6923      	ldr	r3, [r4, #16]
 80052bc:	6861      	ldr	r1, [r4, #4]
 80052be:	4299      	cmp	r1, r3
 80052c0:	bfde      	ittt	le
 80052c2:	2330      	movle	r3, #48	; 0x30
 80052c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80052cc:	1b52      	subs	r2, r2, r5
 80052ce:	6122      	str	r2, [r4, #16]
 80052d0:	f8cd a000 	str.w	sl, [sp]
 80052d4:	464b      	mov	r3, r9
 80052d6:	aa03      	add	r2, sp, #12
 80052d8:	4621      	mov	r1, r4
 80052da:	4640      	mov	r0, r8
 80052dc:	f7ff fee4 	bl	80050a8 <_printf_common>
 80052e0:	3001      	adds	r0, #1
 80052e2:	d14a      	bne.n	800537a <_printf_i+0x1f6>
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052e8:	b004      	add	sp, #16
 80052ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	f043 0320 	orr.w	r3, r3, #32
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	4833      	ldr	r0, [pc, #204]	; (80053c4 <_printf_i+0x240>)
 80052f8:	2778      	movs	r7, #120	; 0x78
 80052fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	6829      	ldr	r1, [r5, #0]
 8005302:	061f      	lsls	r7, r3, #24
 8005304:	f851 6b04 	ldr.w	r6, [r1], #4
 8005308:	d402      	bmi.n	8005310 <_printf_i+0x18c>
 800530a:	065f      	lsls	r7, r3, #25
 800530c:	bf48      	it	mi
 800530e:	b2b6      	uxthmi	r6, r6
 8005310:	07df      	lsls	r7, r3, #31
 8005312:	bf48      	it	mi
 8005314:	f043 0320 	orrmi.w	r3, r3, #32
 8005318:	6029      	str	r1, [r5, #0]
 800531a:	bf48      	it	mi
 800531c:	6023      	strmi	r3, [r4, #0]
 800531e:	b91e      	cbnz	r6, 8005328 <_printf_i+0x1a4>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	f023 0320 	bic.w	r3, r3, #32
 8005326:	6023      	str	r3, [r4, #0]
 8005328:	2310      	movs	r3, #16
 800532a:	e7a7      	b.n	800527c <_printf_i+0xf8>
 800532c:	4824      	ldr	r0, [pc, #144]	; (80053c0 <_printf_i+0x23c>)
 800532e:	e7e4      	b.n	80052fa <_printf_i+0x176>
 8005330:	4615      	mov	r5, r2
 8005332:	e7bd      	b.n	80052b0 <_printf_i+0x12c>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	6826      	ldr	r6, [r4, #0]
 8005338:	6961      	ldr	r1, [r4, #20]
 800533a:	1d18      	adds	r0, r3, #4
 800533c:	6028      	str	r0, [r5, #0]
 800533e:	0635      	lsls	r5, r6, #24
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	d501      	bpl.n	8005348 <_printf_i+0x1c4>
 8005344:	6019      	str	r1, [r3, #0]
 8005346:	e002      	b.n	800534e <_printf_i+0x1ca>
 8005348:	0670      	lsls	r0, r6, #25
 800534a:	d5fb      	bpl.n	8005344 <_printf_i+0x1c0>
 800534c:	8019      	strh	r1, [r3, #0]
 800534e:	2300      	movs	r3, #0
 8005350:	6123      	str	r3, [r4, #16]
 8005352:	4615      	mov	r5, r2
 8005354:	e7bc      	b.n	80052d0 <_printf_i+0x14c>
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	1d1a      	adds	r2, r3, #4
 800535a:	602a      	str	r2, [r5, #0]
 800535c:	681d      	ldr	r5, [r3, #0]
 800535e:	6862      	ldr	r2, [r4, #4]
 8005360:	2100      	movs	r1, #0
 8005362:	4628      	mov	r0, r5
 8005364:	f7fa ff44 	bl	80001f0 <memchr>
 8005368:	b108      	cbz	r0, 800536e <_printf_i+0x1ea>
 800536a:	1b40      	subs	r0, r0, r5
 800536c:	6060      	str	r0, [r4, #4]
 800536e:	6863      	ldr	r3, [r4, #4]
 8005370:	6123      	str	r3, [r4, #16]
 8005372:	2300      	movs	r3, #0
 8005374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005378:	e7aa      	b.n	80052d0 <_printf_i+0x14c>
 800537a:	6923      	ldr	r3, [r4, #16]
 800537c:	462a      	mov	r2, r5
 800537e:	4649      	mov	r1, r9
 8005380:	4640      	mov	r0, r8
 8005382:	47d0      	blx	sl
 8005384:	3001      	adds	r0, #1
 8005386:	d0ad      	beq.n	80052e4 <_printf_i+0x160>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	079b      	lsls	r3, r3, #30
 800538c:	d413      	bmi.n	80053b6 <_printf_i+0x232>
 800538e:	68e0      	ldr	r0, [r4, #12]
 8005390:	9b03      	ldr	r3, [sp, #12]
 8005392:	4298      	cmp	r0, r3
 8005394:	bfb8      	it	lt
 8005396:	4618      	movlt	r0, r3
 8005398:	e7a6      	b.n	80052e8 <_printf_i+0x164>
 800539a:	2301      	movs	r3, #1
 800539c:	4632      	mov	r2, r6
 800539e:	4649      	mov	r1, r9
 80053a0:	4640      	mov	r0, r8
 80053a2:	47d0      	blx	sl
 80053a4:	3001      	adds	r0, #1
 80053a6:	d09d      	beq.n	80052e4 <_printf_i+0x160>
 80053a8:	3501      	adds	r5, #1
 80053aa:	68e3      	ldr	r3, [r4, #12]
 80053ac:	9903      	ldr	r1, [sp, #12]
 80053ae:	1a5b      	subs	r3, r3, r1
 80053b0:	42ab      	cmp	r3, r5
 80053b2:	dcf2      	bgt.n	800539a <_printf_i+0x216>
 80053b4:	e7eb      	b.n	800538e <_printf_i+0x20a>
 80053b6:	2500      	movs	r5, #0
 80053b8:	f104 0619 	add.w	r6, r4, #25
 80053bc:	e7f5      	b.n	80053aa <_printf_i+0x226>
 80053be:	bf00      	nop
 80053c0:	08006765 	.word	0x08006765
 80053c4:	08006776 	.word	0x08006776

080053c8 <__malloc_lock>:
 80053c8:	4801      	ldr	r0, [pc, #4]	; (80053d0 <__malloc_lock+0x8>)
 80053ca:	f7ff bc73 	b.w	8004cb4 <__retarget_lock_acquire_recursive>
 80053ce:	bf00      	nop
 80053d0:	20025b98 	.word	0x20025b98

080053d4 <__malloc_unlock>:
 80053d4:	4801      	ldr	r0, [pc, #4]	; (80053dc <__malloc_unlock+0x8>)
 80053d6:	f7ff bc6e 	b.w	8004cb6 <__retarget_lock_release_recursive>
 80053da:	bf00      	nop
 80053dc:	20025b98 	.word	0x20025b98

080053e0 <_realloc_r>:
 80053e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e4:	4680      	mov	r8, r0
 80053e6:	4614      	mov	r4, r2
 80053e8:	460e      	mov	r6, r1
 80053ea:	b921      	cbnz	r1, 80053f6 <_realloc_r+0x16>
 80053ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053f0:	4611      	mov	r1, r2
 80053f2:	f7ff bdd9 	b.w	8004fa8 <_malloc_r>
 80053f6:	b92a      	cbnz	r2, 8005404 <_realloc_r+0x24>
 80053f8:	f000 f85a 	bl	80054b0 <_free_r>
 80053fc:	4625      	mov	r5, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005404:	f000 f8a0 	bl	8005548 <_malloc_usable_size_r>
 8005408:	4284      	cmp	r4, r0
 800540a:	4607      	mov	r7, r0
 800540c:	d802      	bhi.n	8005414 <_realloc_r+0x34>
 800540e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005412:	d812      	bhi.n	800543a <_realloc_r+0x5a>
 8005414:	4621      	mov	r1, r4
 8005416:	4640      	mov	r0, r8
 8005418:	f7ff fdc6 	bl	8004fa8 <_malloc_r>
 800541c:	4605      	mov	r5, r0
 800541e:	2800      	cmp	r0, #0
 8005420:	d0ed      	beq.n	80053fe <_realloc_r+0x1e>
 8005422:	42bc      	cmp	r4, r7
 8005424:	4622      	mov	r2, r4
 8005426:	4631      	mov	r1, r6
 8005428:	bf28      	it	cs
 800542a:	463a      	movcs	r2, r7
 800542c:	f000 f832 	bl	8005494 <memcpy>
 8005430:	4631      	mov	r1, r6
 8005432:	4640      	mov	r0, r8
 8005434:	f000 f83c 	bl	80054b0 <_free_r>
 8005438:	e7e1      	b.n	80053fe <_realloc_r+0x1e>
 800543a:	4635      	mov	r5, r6
 800543c:	e7df      	b.n	80053fe <_realloc_r+0x1e>

0800543e <memmove>:
 800543e:	4288      	cmp	r0, r1
 8005440:	b510      	push	{r4, lr}
 8005442:	eb01 0402 	add.w	r4, r1, r2
 8005446:	d902      	bls.n	800544e <memmove+0x10>
 8005448:	4284      	cmp	r4, r0
 800544a:	4623      	mov	r3, r4
 800544c:	d807      	bhi.n	800545e <memmove+0x20>
 800544e:	1e43      	subs	r3, r0, #1
 8005450:	42a1      	cmp	r1, r4
 8005452:	d008      	beq.n	8005466 <memmove+0x28>
 8005454:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005458:	f803 2f01 	strb.w	r2, [r3, #1]!
 800545c:	e7f8      	b.n	8005450 <memmove+0x12>
 800545e:	4402      	add	r2, r0
 8005460:	4601      	mov	r1, r0
 8005462:	428a      	cmp	r2, r1
 8005464:	d100      	bne.n	8005468 <memmove+0x2a>
 8005466:	bd10      	pop	{r4, pc}
 8005468:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800546c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005470:	e7f7      	b.n	8005462 <memmove+0x24>
	...

08005474 <_sbrk_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4d06      	ldr	r5, [pc, #24]	; (8005490 <_sbrk_r+0x1c>)
 8005478:	2300      	movs	r3, #0
 800547a:	4604      	mov	r4, r0
 800547c:	4608      	mov	r0, r1
 800547e:	602b      	str	r3, [r5, #0]
 8005480:	f7fd f8b2 	bl	80025e8 <_sbrk>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_sbrk_r+0x1a>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_sbrk_r+0x1a>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	20025ba4 	.word	0x20025ba4

08005494 <memcpy>:
 8005494:	440a      	add	r2, r1
 8005496:	4291      	cmp	r1, r2
 8005498:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800549c:	d100      	bne.n	80054a0 <memcpy+0xc>
 800549e:	4770      	bx	lr
 80054a0:	b510      	push	{r4, lr}
 80054a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054aa:	4291      	cmp	r1, r2
 80054ac:	d1f9      	bne.n	80054a2 <memcpy+0xe>
 80054ae:	bd10      	pop	{r4, pc}

080054b0 <_free_r>:
 80054b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054b2:	2900      	cmp	r1, #0
 80054b4:	d044      	beq.n	8005540 <_free_r+0x90>
 80054b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ba:	9001      	str	r0, [sp, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f1a1 0404 	sub.w	r4, r1, #4
 80054c2:	bfb8      	it	lt
 80054c4:	18e4      	addlt	r4, r4, r3
 80054c6:	f7ff ff7f 	bl	80053c8 <__malloc_lock>
 80054ca:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <_free_r+0x94>)
 80054cc:	9801      	ldr	r0, [sp, #4]
 80054ce:	6813      	ldr	r3, [r2, #0]
 80054d0:	b933      	cbnz	r3, 80054e0 <_free_r+0x30>
 80054d2:	6063      	str	r3, [r4, #4]
 80054d4:	6014      	str	r4, [r2, #0]
 80054d6:	b003      	add	sp, #12
 80054d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054dc:	f7ff bf7a 	b.w	80053d4 <__malloc_unlock>
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	d908      	bls.n	80054f6 <_free_r+0x46>
 80054e4:	6825      	ldr	r5, [r4, #0]
 80054e6:	1961      	adds	r1, r4, r5
 80054e8:	428b      	cmp	r3, r1
 80054ea:	bf01      	itttt	eq
 80054ec:	6819      	ldreq	r1, [r3, #0]
 80054ee:	685b      	ldreq	r3, [r3, #4]
 80054f0:	1949      	addeq	r1, r1, r5
 80054f2:	6021      	streq	r1, [r4, #0]
 80054f4:	e7ed      	b.n	80054d2 <_free_r+0x22>
 80054f6:	461a      	mov	r2, r3
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	b10b      	cbz	r3, 8005500 <_free_r+0x50>
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	d9fa      	bls.n	80054f6 <_free_r+0x46>
 8005500:	6811      	ldr	r1, [r2, #0]
 8005502:	1855      	adds	r5, r2, r1
 8005504:	42a5      	cmp	r5, r4
 8005506:	d10b      	bne.n	8005520 <_free_r+0x70>
 8005508:	6824      	ldr	r4, [r4, #0]
 800550a:	4421      	add	r1, r4
 800550c:	1854      	adds	r4, r2, r1
 800550e:	42a3      	cmp	r3, r4
 8005510:	6011      	str	r1, [r2, #0]
 8005512:	d1e0      	bne.n	80054d6 <_free_r+0x26>
 8005514:	681c      	ldr	r4, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	6053      	str	r3, [r2, #4]
 800551a:	440c      	add	r4, r1
 800551c:	6014      	str	r4, [r2, #0]
 800551e:	e7da      	b.n	80054d6 <_free_r+0x26>
 8005520:	d902      	bls.n	8005528 <_free_r+0x78>
 8005522:	230c      	movs	r3, #12
 8005524:	6003      	str	r3, [r0, #0]
 8005526:	e7d6      	b.n	80054d6 <_free_r+0x26>
 8005528:	6825      	ldr	r5, [r4, #0]
 800552a:	1961      	adds	r1, r4, r5
 800552c:	428b      	cmp	r3, r1
 800552e:	bf04      	itt	eq
 8005530:	6819      	ldreq	r1, [r3, #0]
 8005532:	685b      	ldreq	r3, [r3, #4]
 8005534:	6063      	str	r3, [r4, #4]
 8005536:	bf04      	itt	eq
 8005538:	1949      	addeq	r1, r1, r5
 800553a:	6021      	streq	r1, [r4, #0]
 800553c:	6054      	str	r4, [r2, #4]
 800553e:	e7ca      	b.n	80054d6 <_free_r+0x26>
 8005540:	b003      	add	sp, #12
 8005542:	bd30      	pop	{r4, r5, pc}
 8005544:	20025b9c 	.word	0x20025b9c

08005548 <_malloc_usable_size_r>:
 8005548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800554c:	1f18      	subs	r0, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	bfbc      	itt	lt
 8005552:	580b      	ldrlt	r3, [r1, r0]
 8005554:	18c0      	addlt	r0, r0, r3
 8005556:	4770      	bx	lr

08005558 <_init>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr

08005564 <_fini>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr
